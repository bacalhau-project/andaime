// Code generated by mockery v2.50.1. DO NOT EDIT.

package aws

import (
	context "context"

	sts "github.com/aws/aws-sdk-go-v2/service/sts"
	mock "github.com/stretchr/testify/mock"
)

// MockSTSClienter is an autogenerated mock type for the STSClienter type
type MockSTSClienter struct {
	mock.Mock
}

type MockSTSClienter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSTSClienter) EXPECT() *MockSTSClienter_Expecter {
	return &MockSTSClienter_Expecter{mock: &_m.Mock}
}

// GetCallerIdentity provides a mock function with given fields: ctx, params
func (_m *MockSTSClienter) GetCallerIdentity(ctx context.Context, params *sts.GetCallerIdentityInput) (*sts.GetCallerIdentityOutput, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetCallerIdentity")
	}

	var r0 *sts.GetCallerIdentityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sts.GetCallerIdentityInput) (*sts.GetCallerIdentityOutput, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sts.GetCallerIdentityInput) *sts.GetCallerIdentityOutput); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sts.GetCallerIdentityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sts.GetCallerIdentityInput) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSTSClienter_GetCallerIdentity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCallerIdentity'
type MockSTSClienter_GetCallerIdentity_Call struct {
	*mock.Call
}

// GetCallerIdentity is a helper method to define mock.On call
//   - ctx context.Context
//   - params *sts.GetCallerIdentityInput
func (_e *MockSTSClienter_Expecter) GetCallerIdentity(ctx interface{}, params interface{}) *MockSTSClienter_GetCallerIdentity_Call {
	return &MockSTSClienter_GetCallerIdentity_Call{Call: _e.mock.On("GetCallerIdentity", ctx, params)}
}

func (_c *MockSTSClienter_GetCallerIdentity_Call) Run(run func(ctx context.Context, params *sts.GetCallerIdentityInput)) *MockSTSClienter_GetCallerIdentity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sts.GetCallerIdentityInput))
	})
	return _c
}

func (_c *MockSTSClienter_GetCallerIdentity_Call) Return(_a0 *sts.GetCallerIdentityOutput, _a1 error) *MockSTSClienter_GetCallerIdentity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSTSClienter_GetCallerIdentity_Call) RunAndReturn(run func(context.Context, *sts.GetCallerIdentityInput) (*sts.GetCallerIdentityOutput, error)) *MockSTSClienter_GetCallerIdentity_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSTSClienter creates a new instance of MockSTSClienter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSTSClienter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSTSClienter {
	mock := &MockSTSClienter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
