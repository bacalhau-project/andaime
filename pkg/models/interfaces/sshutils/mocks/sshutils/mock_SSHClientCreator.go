// Code generated by mockery v2.46.3. DO NOT EDIT.

package sshutils

import (
	mock "github.com/stretchr/testify/mock"
	ssh "golang.org/x/crypto/ssh"

	sshutils "github.com/bacalhau-project/andaime/pkg/models/interfaces/sshutils"
)

// MockSSHClientCreator is an autogenerated mock type for the SSHClientCreator type
type MockSSHClientCreator struct {
	mock.Mock
}

type MockSSHClientCreator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSSHClientCreator) EXPECT() *MockSSHClientCreator_Expecter {
	return &MockSSHClientCreator_Expecter{mock: &_m.Mock}
}

// NewClient provides a mock function with given fields: host, port, user, privateKeyPath, config
func (_m *MockSSHClientCreator) NewClient(host string, port int, user string, privateKeyPath string, config *ssh.ClientConfig) (sshutils.SSHClienter, error) {
	ret := _m.Called(host, port, user, privateKeyPath, config)

	if len(ret) == 0 {
		panic("no return value specified for NewClient")
	}

	var r0 sshutils.SSHClienter
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, string, string, *ssh.ClientConfig) (sshutils.SSHClienter, error)); ok {
		return rf(host, port, user, privateKeyPath, config)
	}
	if rf, ok := ret.Get(0).(func(string, int, string, string, *ssh.ClientConfig) sshutils.SSHClienter); ok {
		r0 = rf(host, port, user, privateKeyPath, config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sshutils.SSHClienter)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, string, string, *ssh.ClientConfig) error); ok {
		r1 = rf(host, port, user, privateKeyPath, config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSSHClientCreator_NewClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewClient'
type MockSSHClientCreator_NewClient_Call struct {
	*mock.Call
}

// NewClient is a helper method to define mock.On call
//   - host string
//   - port int
//   - user string
//   - privateKeyPath string
//   - config *ssh.ClientConfig
func (_e *MockSSHClientCreator_Expecter) NewClient(host interface{}, port interface{}, user interface{}, privateKeyPath interface{}, config interface{}) *MockSSHClientCreator_NewClient_Call {
	return &MockSSHClientCreator_NewClient_Call{Call: _e.mock.On("NewClient", host, port, user, privateKeyPath, config)}
}

func (_c *MockSSHClientCreator_NewClient_Call) Run(run func(host string, port int, user string, privateKeyPath string, config *ssh.ClientConfig)) *MockSSHClientCreator_NewClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(string), args[3].(string), args[4].(*ssh.ClientConfig))
	})
	return _c
}

func (_c *MockSSHClientCreator_NewClient_Call) Return(_a0 sshutils.SSHClienter, _a1 error) *MockSSHClientCreator_NewClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSSHClientCreator_NewClient_Call) RunAndReturn(run func(string, int, string, string, *ssh.ClientConfig) (sshutils.SSHClienter, error)) *MockSSHClientCreator_NewClient_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSSHClientCreator creates a new instance of MockSSHClientCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSSHClientCreator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSSHClientCreator {
	mock := &MockSSHClientCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
