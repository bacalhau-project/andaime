Initial Prompt:
I'm going to give you an extended prompt. Do not take any action until I say "YOU ARE OK TO GO".

===

BEGIN PART ONE

We are going to refactor all the files in the 'original/queuing' directory and rewrite all functions into new files in go.

We will approach this task one function at a time, breaking up the files into many sub-files that are testable, repeatable, and portable. For each function, follow these steps:

Identify the next function to refactor.
Analyze the function's current implementation, dependencies, and purpose.
Convert the function to go from python.
Implement refactored functions and unit tests.
Use test driven development methodologies to write the tests first, then pass the tests.
Ensure that the process has no side effects, so mocking any external services will be critical. Use dependency injection if necessary.

Create a new file for the refactored function and tests if appropriate.

END PART ONE

===

BEGIN PART TWO
Provide a brief explanation of the changes made and the rationale behind them.
Suggest any further improvements or considerations for this function.

WHEN YOU ARE DONE REFACTORING A FUNCTION, REMOVE IT FROM THE ORIGINAL PYTHON FILE.

Also, look across the existing go files in the project (anything outside of original/** directory) and make sure that the function is non-duplicative. If it is, then augment the existing function for any missing featuresl.

After completing these steps for a function, wait for confirmation before moving on to the next one. This allows for review and feedback at each stage of the refactoring process.
Please start by identifying the first function to refactor and proceed with step 1.
END PART TWO

=== 

YOU ARE OK TO GO

Current State:
- Refactoring project from Python to Go
- Starting point: 'original/queuing' directory
- Progress:
  - 'get_latest_ubuntu_ami' function refactored as 'GetLatestUbuntuImage' in providers/aws/ec2.go
  - Removed 'get_latest_ubuntu_ami' function from original Python file
  - Created config.yaml file in the root directory to store constants (including AWS regions)
  - Created utils/config.go with global config utility functions
  - Updated providers/aws/ubuntu_amis.go to use new global config functions
  - Created tests for config functions in utils/config_test.go
- Next steps:
  1. Implement remaining functionality from 'get_ubuntu_amis.py':
     a. Create main function to orchestrate AMI retrieval and printing
  2. Create tests for ubuntu_amis.go functions
  3. Update any other parts of the codebase that might be affected by these changes
  4. Review and test the entire refactored functionality