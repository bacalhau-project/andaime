// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	assetpb "cloud.google.com/go/asset/apiv1/assetpb"
	common "github.com/bacalhau-project/andaime/pkg/providers/common"

	gcp "github.com/bacalhau-project/andaime/pkg/providers/gcp"

	mock "github.com/stretchr/testify/mock"

	models "github.com/bacalhau-project/andaime/pkg/models"

	resourcemanagerpb "cloud.google.com/go/resourcemanager/apiv3/resourcemanagerpb"
)

// MockGCPProviderer is an autogenerated mock type for the GCPProviderer type
type MockGCPProviderer struct {
	mock.Mock
}

type MockGCPProviderer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGCPProviderer) EXPECT() *MockGCPProviderer_Expecter {
	return &MockGCPProviderer_Expecter{mock: &_m.Mock}
}

// CheckAuthentication provides a mock function with given fields: ctx
func (_m *MockGCPProviderer) CheckAuthentication(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CheckAuthentication")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGCPProviderer_CheckAuthentication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckAuthentication'
type MockGCPProviderer_CheckAuthentication_Call struct {
	*mock.Call
}

// CheckAuthentication is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockGCPProviderer_Expecter) CheckAuthentication(ctx interface{}) *MockGCPProviderer_CheckAuthentication_Call {
	return &MockGCPProviderer_CheckAuthentication_Call{Call: _e.mock.On("CheckAuthentication", ctx)}
}

func (_c *MockGCPProviderer_CheckAuthentication_Call) Run(run func(ctx context.Context)) *MockGCPProviderer_CheckAuthentication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockGCPProviderer_CheckAuthentication_Call) Return(_a0 error) *MockGCPProviderer_CheckAuthentication_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGCPProviderer_CheckAuthentication_Call) RunAndReturn(run func(context.Context) error) *MockGCPProviderer_CheckAuthentication_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFirewallRules provides a mock function with given fields: ctx, networkName
func (_m *MockGCPProviderer) CreateFirewallRules(ctx context.Context, networkName string) error {
	ret := _m.Called(ctx, networkName)

	if len(ret) == 0 {
		panic("no return value specified for CreateFirewallRules")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, networkName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGCPProviderer_CreateFirewallRules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFirewallRules'
type MockGCPProviderer_CreateFirewallRules_Call struct {
	*mock.Call
}

// CreateFirewallRules is a helper method to define mock.On call
//   - ctx context.Context
//   - networkName string
func (_e *MockGCPProviderer_Expecter) CreateFirewallRules(ctx interface{}, networkName interface{}) *MockGCPProviderer_CreateFirewallRules_Call {
	return &MockGCPProviderer_CreateFirewallRules_Call{Call: _e.mock.On("CreateFirewallRules", ctx, networkName)}
}

func (_c *MockGCPProviderer_CreateFirewallRules_Call) Run(run func(ctx context.Context, networkName string)) *MockGCPProviderer_CreateFirewallRules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockGCPProviderer_CreateFirewallRules_Call) Return(_a0 error) *MockGCPProviderer_CreateFirewallRules_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGCPProviderer_CreateFirewallRules_Call) RunAndReturn(run func(context.Context, string) error) *MockGCPProviderer_CreateFirewallRules_Call {
	_c.Call.Return(run)
	return _c
}

// CreateResources provides a mock function with given fields: ctx
func (_m *MockGCPProviderer) CreateResources(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateResources")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGCPProviderer_CreateResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateResources'
type MockGCPProviderer_CreateResources_Call struct {
	*mock.Call
}

// CreateResources is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockGCPProviderer_Expecter) CreateResources(ctx interface{}) *MockGCPProviderer_CreateResources_Call {
	return &MockGCPProviderer_CreateResources_Call{Call: _e.mock.On("CreateResources", ctx)}
}

func (_c *MockGCPProviderer_CreateResources_Call) Run(run func(ctx context.Context)) *MockGCPProviderer_CreateResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockGCPProviderer_CreateResources_Call) Return(_a0 error) *MockGCPProviderer_CreateResources_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGCPProviderer_CreateResources_Call) RunAndReturn(run func(context.Context) error) *MockGCPProviderer_CreateResources_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStorageBucket provides a mock function with given fields: ctx, bucketName
func (_m *MockGCPProviderer) CreateStorageBucket(ctx context.Context, bucketName string) error {
	ret := _m.Called(ctx, bucketName)

	if len(ret) == 0 {
		panic("no return value specified for CreateStorageBucket")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, bucketName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGCPProviderer_CreateStorageBucket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStorageBucket'
type MockGCPProviderer_CreateStorageBucket_Call struct {
	*mock.Call
}

// CreateStorageBucket is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
func (_e *MockGCPProviderer_Expecter) CreateStorageBucket(ctx interface{}, bucketName interface{}) *MockGCPProviderer_CreateStorageBucket_Call {
	return &MockGCPProviderer_CreateStorageBucket_Call{Call: _e.mock.On("CreateStorageBucket", ctx, bucketName)}
}

func (_c *MockGCPProviderer_CreateStorageBucket_Call) Run(run func(ctx context.Context, bucketName string)) *MockGCPProviderer_CreateStorageBucket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockGCPProviderer_CreateStorageBucket_Call) Return(_a0 error) *MockGCPProviderer_CreateStorageBucket_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGCPProviderer_CreateStorageBucket_Call) RunAndReturn(run func(context.Context, string) error) *MockGCPProviderer_CreateStorageBucket_Call {
	_c.Call.Return(run)
	return _c
}

// CreateVM provides a mock function with given fields: ctx, vmName
func (_m *MockGCPProviderer) CreateVM(ctx context.Context, vmName string) (string, string, error) {
	ret := _m.Called(ctx, vmName)

	if len(ret) == 0 {
		panic("no return value specified for CreateVM")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, string, error)); ok {
		return rf(ctx, vmName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, vmName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) string); ok {
		r1 = rf(ctx, vmName)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, vmName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockGCPProviderer_CreateVM_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVM'
type MockGCPProviderer_CreateVM_Call struct {
	*mock.Call
}

// CreateVM is a helper method to define mock.On call
//   - ctx context.Context
//   - vmName string
func (_e *MockGCPProviderer_Expecter) CreateVM(ctx interface{}, vmName interface{}) *MockGCPProviderer_CreateVM_Call {
	return &MockGCPProviderer_CreateVM_Call{Call: _e.mock.On("CreateVM", ctx, vmName)}
}

func (_c *MockGCPProviderer_CreateVM_Call) Run(run func(ctx context.Context, vmName string)) *MockGCPProviderer_CreateVM_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockGCPProviderer_CreateVM_Call) Return(_a0 string, _a1 string, _a2 error) *MockGCPProviderer_CreateVM_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockGCPProviderer_CreateVM_Call) RunAndReturn(run func(context.Context, string) (string, string, error)) *MockGCPProviderer_CreateVM_Call {
	_c.Call.Return(run)
	return _c
}

// CreateVPCNetwork provides a mock function with given fields: ctx, networkName
func (_m *MockGCPProviderer) CreateVPCNetwork(ctx context.Context, networkName string) error {
	ret := _m.Called(ctx, networkName)

	if len(ret) == 0 {
		panic("no return value specified for CreateVPCNetwork")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, networkName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGCPProviderer_CreateVPCNetwork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVPCNetwork'
type MockGCPProviderer_CreateVPCNetwork_Call struct {
	*mock.Call
}

// CreateVPCNetwork is a helper method to define mock.On call
//   - ctx context.Context
//   - networkName string
func (_e *MockGCPProviderer_Expecter) CreateVPCNetwork(ctx interface{}, networkName interface{}) *MockGCPProviderer_CreateVPCNetwork_Call {
	return &MockGCPProviderer_CreateVPCNetwork_Call{Call: _e.mock.On("CreateVPCNetwork", ctx, networkName)}
}

func (_c *MockGCPProviderer_CreateVPCNetwork_Call) Run(run func(ctx context.Context, networkName string)) *MockGCPProviderer_CreateVPCNetwork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockGCPProviderer_CreateVPCNetwork_Call) Return(_a0 error) *MockGCPProviderer_CreateVPCNetwork_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGCPProviderer_CreateVPCNetwork_Call) RunAndReturn(run func(context.Context, string) error) *MockGCPProviderer_CreateVPCNetwork_Call {
	_c.Call.Return(run)
	return _c
}

// DestroyProject provides a mock function with given fields: ctx, projectID
func (_m *MockGCPProviderer) DestroyProject(ctx context.Context, projectID string) error {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for DestroyProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, projectID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGCPProviderer_DestroyProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DestroyProject'
type MockGCPProviderer_DestroyProject_Call struct {
	*mock.Call
}

// DestroyProject is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
func (_e *MockGCPProviderer_Expecter) DestroyProject(ctx interface{}, projectID interface{}) *MockGCPProviderer_DestroyProject_Call {
	return &MockGCPProviderer_DestroyProject_Call{Call: _e.mock.On("DestroyProject", ctx, projectID)}
}

func (_c *MockGCPProviderer_DestroyProject_Call) Run(run func(ctx context.Context, projectID string)) *MockGCPProviderer_DestroyProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockGCPProviderer_DestroyProject_Call) Return(_a0 error) *MockGCPProviderer_DestroyProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGCPProviderer_DestroyProject_Call) RunAndReturn(run func(context.Context, string) error) *MockGCPProviderer_DestroyProject_Call {
	_c.Call.Return(run)
	return _c
}

// DestroyResources provides a mock function with given fields: ctx, deploymentID
func (_m *MockGCPProviderer) DestroyResources(ctx context.Context, deploymentID string) error {
	ret := _m.Called(ctx, deploymentID)

	if len(ret) == 0 {
		panic("no return value specified for DestroyResources")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, deploymentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGCPProviderer_DestroyResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DestroyResources'
type MockGCPProviderer_DestroyResources_Call struct {
	*mock.Call
}

// DestroyResources is a helper method to define mock.On call
//   - ctx context.Context
//   - deploymentID string
func (_e *MockGCPProviderer_Expecter) DestroyResources(ctx interface{}, deploymentID interface{}) *MockGCPProviderer_DestroyResources_Call {
	return &MockGCPProviderer_DestroyResources_Call{Call: _e.mock.On("DestroyResources", ctx, deploymentID)}
}

func (_c *MockGCPProviderer_DestroyResources_Call) Run(run func(ctx context.Context, deploymentID string)) *MockGCPProviderer_DestroyResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockGCPProviderer_DestroyResources_Call) Return(_a0 error) *MockGCPProviderer_DestroyResources_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGCPProviderer_DestroyResources_Call) RunAndReturn(run func(context.Context, string) error) *MockGCPProviderer_DestroyResources_Call {
	_c.Call.Return(run)
	return _c
}

// EnableAPI provides a mock function with given fields: ctx, apiName
func (_m *MockGCPProviderer) EnableAPI(ctx context.Context, apiName string) error {
	ret := _m.Called(ctx, apiName)

	if len(ret) == 0 {
		panic("no return value specified for EnableAPI")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, apiName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGCPProviderer_EnableAPI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableAPI'
type MockGCPProviderer_EnableAPI_Call struct {
	*mock.Call
}

// EnableAPI is a helper method to define mock.On call
//   - ctx context.Context
//   - apiName string
func (_e *MockGCPProviderer_Expecter) EnableAPI(ctx interface{}, apiName interface{}) *MockGCPProviderer_EnableAPI_Call {
	return &MockGCPProviderer_EnableAPI_Call{Call: _e.mock.On("EnableAPI", ctx, apiName)}
}

func (_c *MockGCPProviderer_EnableAPI_Call) Run(run func(ctx context.Context, apiName string)) *MockGCPProviderer_EnableAPI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockGCPProviderer_EnableAPI_Call) Return(_a0 error) *MockGCPProviderer_EnableAPI_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGCPProviderer_EnableAPI_Call) RunAndReturn(run func(context.Context, string) error) *MockGCPProviderer_EnableAPI_Call {
	_c.Call.Return(run)
	return _c
}

// EnableRequiredAPIs provides a mock function with given fields: ctx
func (_m *MockGCPProviderer) EnableRequiredAPIs(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for EnableRequiredAPIs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGCPProviderer_EnableRequiredAPIs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableRequiredAPIs'
type MockGCPProviderer_EnableRequiredAPIs_Call struct {
	*mock.Call
}

// EnableRequiredAPIs is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockGCPProviderer_Expecter) EnableRequiredAPIs(ctx interface{}) *MockGCPProviderer_EnableRequiredAPIs_Call {
	return &MockGCPProviderer_EnableRequiredAPIs_Call{Call: _e.mock.On("EnableRequiredAPIs", ctx)}
}

func (_c *MockGCPProviderer_EnableRequiredAPIs_Call) Run(run func(ctx context.Context)) *MockGCPProviderer_EnableRequiredAPIs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockGCPProviderer_EnableRequiredAPIs_Call) Return(_a0 error) *MockGCPProviderer_EnableRequiredAPIs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGCPProviderer_EnableRequiredAPIs_Call) RunAndReturn(run func(context.Context) error) *MockGCPProviderer_EnableRequiredAPIs_Call {
	_c.Call.Return(run)
	return _c
}

// EnsureFirewallRules provides a mock function with given fields: ctx, networkName
func (_m *MockGCPProviderer) EnsureFirewallRules(ctx context.Context, networkName string) error {
	ret := _m.Called(ctx, networkName)

	if len(ret) == 0 {
		panic("no return value specified for EnsureFirewallRules")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, networkName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGCPProviderer_EnsureFirewallRules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureFirewallRules'
type MockGCPProviderer_EnsureFirewallRules_Call struct {
	*mock.Call
}

// EnsureFirewallRules is a helper method to define mock.On call
//   - ctx context.Context
//   - networkName string
func (_e *MockGCPProviderer_Expecter) EnsureFirewallRules(ctx interface{}, networkName interface{}) *MockGCPProviderer_EnsureFirewallRules_Call {
	return &MockGCPProviderer_EnsureFirewallRules_Call{Call: _e.mock.On("EnsureFirewallRules", ctx, networkName)}
}

func (_c *MockGCPProviderer_EnsureFirewallRules_Call) Run(run func(ctx context.Context, networkName string)) *MockGCPProviderer_EnsureFirewallRules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockGCPProviderer_EnsureFirewallRules_Call) Return(_a0 error) *MockGCPProviderer_EnsureFirewallRules_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGCPProviderer_EnsureFirewallRules_Call) RunAndReturn(run func(context.Context, string) error) *MockGCPProviderer_EnsureFirewallRules_Call {
	_c.Call.Return(run)
	return _c
}

// EnsureProject provides a mock function with given fields: ctx, projectID
func (_m *MockGCPProviderer) EnsureProject(ctx context.Context, projectID string) (string, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for EnsureProject")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, projectID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGCPProviderer_EnsureProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureProject'
type MockGCPProviderer_EnsureProject_Call struct {
	*mock.Call
}

// EnsureProject is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
func (_e *MockGCPProviderer_Expecter) EnsureProject(ctx interface{}, projectID interface{}) *MockGCPProviderer_EnsureProject_Call {
	return &MockGCPProviderer_EnsureProject_Call{Call: _e.mock.On("EnsureProject", ctx, projectID)}
}

func (_c *MockGCPProviderer_EnsureProject_Call) Run(run func(ctx context.Context, projectID string)) *MockGCPProviderer_EnsureProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockGCPProviderer_EnsureProject_Call) Return(_a0 string, _a1 error) *MockGCPProviderer_EnsureProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGCPProviderer_EnsureProject_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockGCPProviderer_EnsureProject_Call {
	_c.Call.Return(run)
	return _c
}

// EnsureVPCNetwork provides a mock function with given fields: ctx, vpcNetworkName
func (_m *MockGCPProviderer) EnsureVPCNetwork(ctx context.Context, vpcNetworkName string) error {
	ret := _m.Called(ctx, vpcNetworkName)

	if len(ret) == 0 {
		panic("no return value specified for EnsureVPCNetwork")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, vpcNetworkName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGCPProviderer_EnsureVPCNetwork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureVPCNetwork'
type MockGCPProviderer_EnsureVPCNetwork_Call struct {
	*mock.Call
}

// EnsureVPCNetwork is a helper method to define mock.On call
//   - ctx context.Context
//   - vpcNetworkName string
func (_e *MockGCPProviderer_Expecter) EnsureVPCNetwork(ctx interface{}, vpcNetworkName interface{}) *MockGCPProviderer_EnsureVPCNetwork_Call {
	return &MockGCPProviderer_EnsureVPCNetwork_Call{Call: _e.mock.On("EnsureVPCNetwork", ctx, vpcNetworkName)}
}

func (_c *MockGCPProviderer_EnsureVPCNetwork_Call) Run(run func(ctx context.Context, vpcNetworkName string)) *MockGCPProviderer_EnsureVPCNetwork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockGCPProviderer_EnsureVPCNetwork_Call) Return(_a0 error) *MockGCPProviderer_EnsureVPCNetwork_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGCPProviderer_EnsureVPCNetwork_Call) RunAndReturn(run func(context.Context, string) error) *MockGCPProviderer_EnsureVPCNetwork_Call {
	_c.Call.Return(run)
	return _c
}

// FinalizeDeployment provides a mock function with given fields: ctx
func (_m *MockGCPProviderer) FinalizeDeployment(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FinalizeDeployment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGCPProviderer_FinalizeDeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinalizeDeployment'
type MockGCPProviderer_FinalizeDeployment_Call struct {
	*mock.Call
}

// FinalizeDeployment is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockGCPProviderer_Expecter) FinalizeDeployment(ctx interface{}) *MockGCPProviderer_FinalizeDeployment_Call {
	return &MockGCPProviderer_FinalizeDeployment_Call{Call: _e.mock.On("FinalizeDeployment", ctx)}
}

func (_c *MockGCPProviderer_FinalizeDeployment_Call) Run(run func(ctx context.Context)) *MockGCPProviderer_FinalizeDeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockGCPProviderer_FinalizeDeployment_Call) Return(_a0 error) *MockGCPProviderer_FinalizeDeployment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGCPProviderer_FinalizeDeployment_Call) RunAndReturn(run func(context.Context) error) *MockGCPProviderer_FinalizeDeployment_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterDeployer provides a mock function with given fields:
func (_m *MockGCPProviderer) GetClusterDeployer() common.ClusterDeployerer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetClusterDeployer")
	}

	var r0 common.ClusterDeployerer
	if rf, ok := ret.Get(0).(func() common.ClusterDeployerer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.ClusterDeployerer)
		}
	}

	return r0
}

// MockGCPProviderer_GetClusterDeployer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterDeployer'
type MockGCPProviderer_GetClusterDeployer_Call struct {
	*mock.Call
}

// GetClusterDeployer is a helper method to define mock.On call
func (_e *MockGCPProviderer_Expecter) GetClusterDeployer() *MockGCPProviderer_GetClusterDeployer_Call {
	return &MockGCPProviderer_GetClusterDeployer_Call{Call: _e.mock.On("GetClusterDeployer")}
}

func (_c *MockGCPProviderer_GetClusterDeployer_Call) Run(run func()) *MockGCPProviderer_GetClusterDeployer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGCPProviderer_GetClusterDeployer_Call) Return(_a0 common.ClusterDeployerer) *MockGCPProviderer_GetClusterDeployer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGCPProviderer_GetClusterDeployer_Call) RunAndReturn(run func() common.ClusterDeployerer) *MockGCPProviderer_GetClusterDeployer_Call {
	_c.Call.Return(run)
	return _c
}

// GetGCPClient provides a mock function with given fields:
func (_m *MockGCPProviderer) GetGCPClient() gcp.GCPClienter {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGCPClient")
	}

	var r0 gcp.GCPClienter
	if rf, ok := ret.Get(0).(func() gcp.GCPClienter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gcp.GCPClienter)
		}
	}

	return r0
}

// MockGCPProviderer_GetGCPClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGCPClient'
type MockGCPProviderer_GetGCPClient_Call struct {
	*mock.Call
}

// GetGCPClient is a helper method to define mock.On call
func (_e *MockGCPProviderer_Expecter) GetGCPClient() *MockGCPProviderer_GetGCPClient_Call {
	return &MockGCPProviderer_GetGCPClient_Call{Call: _e.mock.On("GetGCPClient")}
}

func (_c *MockGCPProviderer_GetGCPClient_Call) Run(run func()) *MockGCPProviderer_GetGCPClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGCPProviderer_GetGCPClient_Call) Return(_a0 gcp.GCPClienter) *MockGCPProviderer_GetGCPClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGCPProviderer_GetGCPClient_Call) RunAndReturn(run func() gcp.GCPClienter) *MockGCPProviderer_GetGCPClient_Call {
	_c.Call.Return(run)
	return _c
}

// GetVMExternalIP provides a mock function with given fields: ctx, vmName, locationData
func (_m *MockGCPProviderer) GetVMExternalIP(ctx context.Context, vmName string, locationData map[string]string) (string, error) {
	ret := _m.Called(ctx, vmName, locationData)

	if len(ret) == 0 {
		panic("no return value specified for GetVMExternalIP")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) (string, error)); ok {
		return rf(ctx, vmName, locationData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) string); ok {
		r0 = rf(ctx, vmName, locationData)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]string) error); ok {
		r1 = rf(ctx, vmName, locationData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGCPProviderer_GetVMExternalIP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVMExternalIP'
type MockGCPProviderer_GetVMExternalIP_Call struct {
	*mock.Call
}

// GetVMExternalIP is a helper method to define mock.On call
//   - ctx context.Context
//   - vmName string
//   - locationData map[string]string
func (_e *MockGCPProviderer_Expecter) GetVMExternalIP(ctx interface{}, vmName interface{}, locationData interface{}) *MockGCPProviderer_GetVMExternalIP_Call {
	return &MockGCPProviderer_GetVMExternalIP_Call{Call: _e.mock.On("GetVMExternalIP", ctx, vmName, locationData)}
}

func (_c *MockGCPProviderer_GetVMExternalIP_Call) Run(run func(ctx context.Context, vmName string, locationData map[string]string)) *MockGCPProviderer_GetVMExternalIP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]string))
	})
	return _c
}

func (_c *MockGCPProviderer_GetVMExternalIP_Call) Return(_a0 string, _a1 error) *MockGCPProviderer_GetVMExternalIP_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGCPProviderer_GetVMExternalIP_Call) RunAndReturn(run func(context.Context, string, map[string]string) (string, error)) *MockGCPProviderer_GetVMExternalIP_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllAssetsInProject provides a mock function with given fields: ctx, projectID
func (_m *MockGCPProviderer) ListAllAssetsInProject(ctx context.Context, projectID string) ([]*assetpb.Asset, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for ListAllAssetsInProject")
	}

	var r0 []*assetpb.Asset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*assetpb.Asset, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*assetpb.Asset); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*assetpb.Asset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGCPProviderer_ListAllAssetsInProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllAssetsInProject'
type MockGCPProviderer_ListAllAssetsInProject_Call struct {
	*mock.Call
}

// ListAllAssetsInProject is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
func (_e *MockGCPProviderer_Expecter) ListAllAssetsInProject(ctx interface{}, projectID interface{}) *MockGCPProviderer_ListAllAssetsInProject_Call {
	return &MockGCPProviderer_ListAllAssetsInProject_Call{Call: _e.mock.On("ListAllAssetsInProject", ctx, projectID)}
}

func (_c *MockGCPProviderer_ListAllAssetsInProject_Call) Run(run func(ctx context.Context, projectID string)) *MockGCPProviderer_ListAllAssetsInProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockGCPProviderer_ListAllAssetsInProject_Call) Return(_a0 []*assetpb.Asset, _a1 error) *MockGCPProviderer_ListAllAssetsInProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGCPProviderer_ListAllAssetsInProject_Call) RunAndReturn(run func(context.Context, string) ([]*assetpb.Asset, error)) *MockGCPProviderer_ListAllAssetsInProject_Call {
	_c.Call.Return(run)
	return _c
}

// ListBillingAccounts provides a mock function with given fields: ctx
func (_m *MockGCPProviderer) ListBillingAccounts(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListBillingAccounts")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGCPProviderer_ListBillingAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBillingAccounts'
type MockGCPProviderer_ListBillingAccounts_Call struct {
	*mock.Call
}

// ListBillingAccounts is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockGCPProviderer_Expecter) ListBillingAccounts(ctx interface{}) *MockGCPProviderer_ListBillingAccounts_Call {
	return &MockGCPProviderer_ListBillingAccounts_Call{Call: _e.mock.On("ListBillingAccounts", ctx)}
}

func (_c *MockGCPProviderer_ListBillingAccounts_Call) Run(run func(ctx context.Context)) *MockGCPProviderer_ListBillingAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockGCPProviderer_ListBillingAccounts_Call) Return(_a0 []string, _a1 error) *MockGCPProviderer_ListBillingAccounts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGCPProviderer_ListBillingAccounts_Call) RunAndReturn(run func(context.Context) ([]string, error)) *MockGCPProviderer_ListBillingAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjects provides a mock function with given fields: ctx
func (_m *MockGCPProviderer) ListProjects(ctx context.Context) ([]*resourcemanagerpb.Project, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListProjects")
	}

	var r0 []*resourcemanagerpb.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*resourcemanagerpb.Project, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*resourcemanagerpb.Project); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*resourcemanagerpb.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGCPProviderer_ListProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjects'
type MockGCPProviderer_ListProjects_Call struct {
	*mock.Call
}

// ListProjects is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockGCPProviderer_Expecter) ListProjects(ctx interface{}) *MockGCPProviderer_ListProjects_Call {
	return &MockGCPProviderer_ListProjects_Call{Call: _e.mock.On("ListProjects", ctx)}
}

func (_c *MockGCPProviderer_ListProjects_Call) Run(run func(ctx context.Context)) *MockGCPProviderer_ListProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockGCPProviderer_ListProjects_Call) Return(_a0 []*resourcemanagerpb.Project, _a1 error) *MockGCPProviderer_ListProjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGCPProviderer_ListProjects_Call) RunAndReturn(run func(context.Context) ([]*resourcemanagerpb.Project, error)) *MockGCPProviderer_ListProjects_Call {
	_c.Call.Return(run)
	return _c
}

// PollResources provides a mock function with given fields: ctx
func (_m *MockGCPProviderer) PollResources(ctx context.Context) ([]interface{}, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for PollResources")
	}

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]interface{}, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []interface{}); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGCPProviderer_PollResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PollResources'
type MockGCPProviderer_PollResources_Call struct {
	*mock.Call
}

// PollResources is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockGCPProviderer_Expecter) PollResources(ctx interface{}) *MockGCPProviderer_PollResources_Call {
	return &MockGCPProviderer_PollResources_Call{Call: _e.mock.On("PollResources", ctx)}
}

func (_c *MockGCPProviderer_PollResources_Call) Run(run func(ctx context.Context)) *MockGCPProviderer_PollResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockGCPProviderer_PollResources_Call) Return(_a0 []interface{}, _a1 error) *MockGCPProviderer_PollResources_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGCPProviderer_PollResources_Call) RunAndReturn(run func(context.Context) ([]interface{}, error)) *MockGCPProviderer_PollResources_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareDeployment provides a mock function with given fields: ctx
func (_m *MockGCPProviderer) PrepareDeployment(ctx context.Context) (*models.Deployment, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for PrepareDeployment")
	}

	var r0 *models.Deployment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*models.Deployment, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *models.Deployment); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Deployment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGCPProviderer_PrepareDeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareDeployment'
type MockGCPProviderer_PrepareDeployment_Call struct {
	*mock.Call
}

// PrepareDeployment is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockGCPProviderer_Expecter) PrepareDeployment(ctx interface{}) *MockGCPProviderer_PrepareDeployment_Call {
	return &MockGCPProviderer_PrepareDeployment_Call{Call: _e.mock.On("PrepareDeployment", ctx)}
}

func (_c *MockGCPProviderer_PrepareDeployment_Call) Run(run func(ctx context.Context)) *MockGCPProviderer_PrepareDeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockGCPProviderer_PrepareDeployment_Call) Return(_a0 *models.Deployment, _a1 error) *MockGCPProviderer_PrepareDeployment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGCPProviderer_PrepareDeployment_Call) RunAndReturn(run func(context.Context) (*models.Deployment, error)) *MockGCPProviderer_PrepareDeployment_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessMachinesConfig provides a mock function with given fields: ctx
func (_m *MockGCPProviderer) ProcessMachinesConfig(ctx context.Context) (map[string]models.Machiner, map[string]bool, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ProcessMachinesConfig")
	}

	var r0 map[string]models.Machiner
	var r1 map[string]bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]models.Machiner, map[string]bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]models.Machiner); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]models.Machiner)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) map[string]bool); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]bool)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockGCPProviderer_ProcessMachinesConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessMachinesConfig'
type MockGCPProviderer_ProcessMachinesConfig_Call struct {
	*mock.Call
}

// ProcessMachinesConfig is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockGCPProviderer_Expecter) ProcessMachinesConfig(ctx interface{}) *MockGCPProviderer_ProcessMachinesConfig_Call {
	return &MockGCPProviderer_ProcessMachinesConfig_Call{Call: _e.mock.On("ProcessMachinesConfig", ctx)}
}

func (_c *MockGCPProviderer_ProcessMachinesConfig_Call) Run(run func(ctx context.Context)) *MockGCPProviderer_ProcessMachinesConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockGCPProviderer_ProcessMachinesConfig_Call) Return(_a0 map[string]models.Machiner, _a1 map[string]bool, _a2 error) *MockGCPProviderer_ProcessMachinesConfig_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockGCPProviderer_ProcessMachinesConfig_Call) RunAndReturn(run func(context.Context) (map[string]models.Machiner, map[string]bool, error)) *MockGCPProviderer_ProcessMachinesConfig_Call {
	_c.Call.Return(run)
	return _c
}

// SetBillingAccount provides a mock function with given fields: ctx, billingAccountID
func (_m *MockGCPProviderer) SetBillingAccount(ctx context.Context, billingAccountID string) error {
	ret := _m.Called(ctx, billingAccountID)

	if len(ret) == 0 {
		panic("no return value specified for SetBillingAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, billingAccountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGCPProviderer_SetBillingAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetBillingAccount'
type MockGCPProviderer_SetBillingAccount_Call struct {
	*mock.Call
}

// SetBillingAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - billingAccountID string
func (_e *MockGCPProviderer_Expecter) SetBillingAccount(ctx interface{}, billingAccountID interface{}) *MockGCPProviderer_SetBillingAccount_Call {
	return &MockGCPProviderer_SetBillingAccount_Call{Call: _e.mock.On("SetBillingAccount", ctx, billingAccountID)}
}

func (_c *MockGCPProviderer_SetBillingAccount_Call) Run(run func(ctx context.Context, billingAccountID string)) *MockGCPProviderer_SetBillingAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockGCPProviderer_SetBillingAccount_Call) Return(_a0 error) *MockGCPProviderer_SetBillingAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGCPProviderer_SetBillingAccount_Call) RunAndReturn(run func(context.Context, string) error) *MockGCPProviderer_SetBillingAccount_Call {
	_c.Call.Return(run)
	return _c
}

// SetClusterDeployer provides a mock function with given fields: deployer
func (_m *MockGCPProviderer) SetClusterDeployer(deployer common.ClusterDeployerer) {
	_m.Called(deployer)
}

// MockGCPProviderer_SetClusterDeployer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetClusterDeployer'
type MockGCPProviderer_SetClusterDeployer_Call struct {
	*mock.Call
}

// SetClusterDeployer is a helper method to define mock.On call
//   - deployer common.ClusterDeployerer
func (_e *MockGCPProviderer_Expecter) SetClusterDeployer(deployer interface{}) *MockGCPProviderer_SetClusterDeployer_Call {
	return &MockGCPProviderer_SetClusterDeployer_Call{Call: _e.mock.On("SetClusterDeployer", deployer)}
}

func (_c *MockGCPProviderer_SetClusterDeployer_Call) Run(run func(deployer common.ClusterDeployerer)) *MockGCPProviderer_SetClusterDeployer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.ClusterDeployerer))
	})
	return _c
}

func (_c *MockGCPProviderer_SetClusterDeployer_Call) Return() *MockGCPProviderer_SetClusterDeployer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGCPProviderer_SetClusterDeployer_Call) RunAndReturn(run func(common.ClusterDeployerer)) *MockGCPProviderer_SetClusterDeployer_Call {
	_c.Call.Return(run)
	return _c
}

// SetGCPClient provides a mock function with given fields: client
func (_m *MockGCPProviderer) SetGCPClient(client gcp.GCPClienter) {
	_m.Called(client)
}

// MockGCPProviderer_SetGCPClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetGCPClient'
type MockGCPProviderer_SetGCPClient_Call struct {
	*mock.Call
}

// SetGCPClient is a helper method to define mock.On call
//   - client gcp.GCPClienter
func (_e *MockGCPProviderer_Expecter) SetGCPClient(client interface{}) *MockGCPProviderer_SetGCPClient_Call {
	return &MockGCPProviderer_SetGCPClient_Call{Call: _e.mock.On("SetGCPClient", client)}
}

func (_c *MockGCPProviderer_SetGCPClient_Call) Run(run func(client gcp.GCPClienter)) *MockGCPProviderer_SetGCPClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gcp.GCPClienter))
	})
	return _c
}

func (_c *MockGCPProviderer_SetGCPClient_Call) Return() *MockGCPProviderer_SetGCPClient_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGCPProviderer_SetGCPClient_Call) RunAndReturn(run func(gcp.GCPClienter)) *MockGCPProviderer_SetGCPClient_Call {
	_c.Call.Return(run)
	return _c
}

// StartResourcePolling provides a mock function with given fields: ctx
func (_m *MockGCPProviderer) StartResourcePolling(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for StartResourcePolling")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGCPProviderer_StartResourcePolling_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartResourcePolling'
type MockGCPProviderer_StartResourcePolling_Call struct {
	*mock.Call
}

// StartResourcePolling is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockGCPProviderer_Expecter) StartResourcePolling(ctx interface{}) *MockGCPProviderer_StartResourcePolling_Call {
	return &MockGCPProviderer_StartResourcePolling_Call{Call: _e.mock.On("StartResourcePolling", ctx)}
}

func (_c *MockGCPProviderer_StartResourcePolling_Call) Run(run func(ctx context.Context)) *MockGCPProviderer_StartResourcePolling_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockGCPProviderer_StartResourcePolling_Call) Return(_a0 error) *MockGCPProviderer_StartResourcePolling_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGCPProviderer_StartResourcePolling_Call) RunAndReturn(run func(context.Context) error) *MockGCPProviderer_StartResourcePolling_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateMachineType provides a mock function with given fields: ctx, location, machineType
func (_m *MockGCPProviderer) ValidateMachineType(ctx context.Context, location string, machineType string) (bool, error) {
	ret := _m.Called(ctx, location, machineType)

	if len(ret) == 0 {
		panic("no return value specified for ValidateMachineType")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, location, machineType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, location, machineType)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, location, machineType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGCPProviderer_ValidateMachineType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateMachineType'
type MockGCPProviderer_ValidateMachineType_Call struct {
	*mock.Call
}

// ValidateMachineType is a helper method to define mock.On call
//   - ctx context.Context
//   - location string
//   - machineType string
func (_e *MockGCPProviderer_Expecter) ValidateMachineType(ctx interface{}, location interface{}, machineType interface{}) *MockGCPProviderer_ValidateMachineType_Call {
	return &MockGCPProviderer_ValidateMachineType_Call{Call: _e.mock.On("ValidateMachineType", ctx, location, machineType)}
}

func (_c *MockGCPProviderer_ValidateMachineType_Call) Run(run func(ctx context.Context, location string, machineType string)) *MockGCPProviderer_ValidateMachineType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockGCPProviderer_ValidateMachineType_Call) Return(_a0 bool, _a1 error) *MockGCPProviderer_ValidateMachineType_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGCPProviderer_ValidateMachineType_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *MockGCPProviderer_ValidateMachineType_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGCPProviderer creates a new instance of MockGCPProviderer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGCPProviderer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGCPProviderer {
	mock := &MockGCPProviderer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
