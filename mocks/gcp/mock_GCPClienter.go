// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	assetpb "cloud.google.com/go/asset/apiv1/assetpb"
	computepb "cloud.google.com/go/compute/apiv1/computepb"

	context "context"

	iam "google.golang.org/api/iam/v1"

	mock "github.com/stretchr/testify/mock"

	resourcemanagerpb "cloud.google.com/go/resourcemanager/apiv3/resourcemanagerpb"
)

// MockGCPClienter is an autogenerated mock type for the GCPClienter type
type MockGCPClienter struct {
	mock.Mock
}

type MockGCPClienter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGCPClienter) EXPECT() *MockGCPClienter_Expecter {
	return &MockGCPClienter_Expecter{mock: &_m.Mock}
}

// CheckAuthentication provides a mock function with given fields: ctx
func (_m *MockGCPClienter) CheckAuthentication(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CheckAuthentication")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGCPClienter_CheckAuthentication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckAuthentication'
type MockGCPClienter_CheckAuthentication_Call struct {
	*mock.Call
}

// CheckAuthentication is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockGCPClienter_Expecter) CheckAuthentication(ctx interface{}) *MockGCPClienter_CheckAuthentication_Call {
	return &MockGCPClienter_CheckAuthentication_Call{Call: _e.mock.On("CheckAuthentication", ctx)}
}

func (_c *MockGCPClienter_CheckAuthentication_Call) Run(run func(ctx context.Context)) *MockGCPClienter_CheckAuthentication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockGCPClienter_CheckAuthentication_Call) Return(_a0 error) *MockGCPClienter_CheckAuthentication_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGCPClienter_CheckAuthentication_Call) RunAndReturn(run func(context.Context) error) *MockGCPClienter_CheckAuthentication_Call {
	_c.Call.Return(run)
	return _c
}

// CheckFirewallRuleExists provides a mock function with given fields: ctx, projectID, ruleName
func (_m *MockGCPClienter) CheckFirewallRuleExists(ctx context.Context, projectID string, ruleName string) error {
	ret := _m.Called(ctx, projectID, ruleName)

	if len(ret) == 0 {
		panic("no return value specified for CheckFirewallRuleExists")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectID, ruleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGCPClienter_CheckFirewallRuleExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckFirewallRuleExists'
type MockGCPClienter_CheckFirewallRuleExists_Call struct {
	*mock.Call
}

// CheckFirewallRuleExists is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - ruleName string
func (_e *MockGCPClienter_Expecter) CheckFirewallRuleExists(ctx interface{}, projectID interface{}, ruleName interface{}) *MockGCPClienter_CheckFirewallRuleExists_Call {
	return &MockGCPClienter_CheckFirewallRuleExists_Call{Call: _e.mock.On("CheckFirewallRuleExists", ctx, projectID, ruleName)}
}

func (_c *MockGCPClienter_CheckFirewallRuleExists_Call) Run(run func(ctx context.Context, projectID string, ruleName string)) *MockGCPClienter_CheckFirewallRuleExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockGCPClienter_CheckFirewallRuleExists_Call) Return(_a0 error) *MockGCPClienter_CheckFirewallRuleExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGCPClienter_CheckFirewallRuleExists_Call) RunAndReturn(run func(context.Context, string, string) error) *MockGCPClienter_CheckFirewallRuleExists_Call {
	_c.Call.Return(run)
	return _c
}

// CheckPermissions provides a mock function with given fields: ctx
func (_m *MockGCPClienter) CheckPermissions(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CheckPermissions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGCPClienter_CheckPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckPermissions'
type MockGCPClienter_CheckPermissions_Call struct {
	*mock.Call
}

// CheckPermissions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockGCPClienter_Expecter) CheckPermissions(ctx interface{}) *MockGCPClienter_CheckPermissions_Call {
	return &MockGCPClienter_CheckPermissions_Call{Call: _e.mock.On("CheckPermissions", ctx)}
}

func (_c *MockGCPClienter_CheckPermissions_Call) Run(run func(ctx context.Context)) *MockGCPClienter_CheckPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockGCPClienter_CheckPermissions_Call) Return(_a0 error) *MockGCPClienter_CheckPermissions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGCPClienter_CheckPermissions_Call) RunAndReturn(run func(context.Context) error) *MockGCPClienter_CheckPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFirewallRules provides a mock function with given fields: ctx, networkName
func (_m *MockGCPClienter) CreateFirewallRules(ctx context.Context, networkName string) error {
	ret := _m.Called(ctx, networkName)

	if len(ret) == 0 {
		panic("no return value specified for CreateFirewallRules")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, networkName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGCPClienter_CreateFirewallRules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFirewallRules'
type MockGCPClienter_CreateFirewallRules_Call struct {
	*mock.Call
}

// CreateFirewallRules is a helper method to define mock.On call
//   - ctx context.Context
//   - networkName string
func (_e *MockGCPClienter_Expecter) CreateFirewallRules(ctx interface{}, networkName interface{}) *MockGCPClienter_CreateFirewallRules_Call {
	return &MockGCPClienter_CreateFirewallRules_Call{Call: _e.mock.On("CreateFirewallRules", ctx, networkName)}
}

func (_c *MockGCPClienter_CreateFirewallRules_Call) Run(run func(ctx context.Context, networkName string)) *MockGCPClienter_CreateFirewallRules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockGCPClienter_CreateFirewallRules_Call) Return(_a0 error) *MockGCPClienter_CreateFirewallRules_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGCPClienter_CreateFirewallRules_Call) RunAndReturn(run func(context.Context, string) error) *MockGCPClienter_CreateFirewallRules_Call {
	_c.Call.Return(run)
	return _c
}

// CreateServiceAccount provides a mock function with given fields: ctx, projectID
func (_m *MockGCPClienter) CreateServiceAccount(ctx context.Context, projectID string) (*iam.ServiceAccount, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceAccount")
	}

	var r0 *iam.ServiceAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*iam.ServiceAccount, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *iam.ServiceAccount); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ServiceAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGCPClienter_CreateServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServiceAccount'
type MockGCPClienter_CreateServiceAccount_Call struct {
	*mock.Call
}

// CreateServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
func (_e *MockGCPClienter_Expecter) CreateServiceAccount(ctx interface{}, projectID interface{}) *MockGCPClienter_CreateServiceAccount_Call {
	return &MockGCPClienter_CreateServiceAccount_Call{Call: _e.mock.On("CreateServiceAccount", ctx, projectID)}
}

func (_c *MockGCPClienter_CreateServiceAccount_Call) Run(run func(ctx context.Context, projectID string)) *MockGCPClienter_CreateServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockGCPClienter_CreateServiceAccount_Call) Return(_a0 *iam.ServiceAccount, _a1 error) *MockGCPClienter_CreateServiceAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGCPClienter_CreateServiceAccount_Call) RunAndReturn(run func(context.Context, string) (*iam.ServiceAccount, error)) *MockGCPClienter_CreateServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStorageBucket provides a mock function with given fields: ctx, bucketName
func (_m *MockGCPClienter) CreateStorageBucket(ctx context.Context, bucketName string) error {
	ret := _m.Called(ctx, bucketName)

	if len(ret) == 0 {
		panic("no return value specified for CreateStorageBucket")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, bucketName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGCPClienter_CreateStorageBucket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStorageBucket'
type MockGCPClienter_CreateStorageBucket_Call struct {
	*mock.Call
}

// CreateStorageBucket is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
func (_e *MockGCPClienter_Expecter) CreateStorageBucket(ctx interface{}, bucketName interface{}) *MockGCPClienter_CreateStorageBucket_Call {
	return &MockGCPClienter_CreateStorageBucket_Call{Call: _e.mock.On("CreateStorageBucket", ctx, bucketName)}
}

func (_c *MockGCPClienter_CreateStorageBucket_Call) Run(run func(ctx context.Context, bucketName string)) *MockGCPClienter_CreateStorageBucket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockGCPClienter_CreateStorageBucket_Call) Return(_a0 error) *MockGCPClienter_CreateStorageBucket_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGCPClienter_CreateStorageBucket_Call) RunAndReturn(run func(context.Context, string) error) *MockGCPClienter_CreateStorageBucket_Call {
	_c.Call.Return(run)
	return _c
}

// CreateVM provides a mock function with given fields: ctx, vmName
func (_m *MockGCPClienter) CreateVM(ctx context.Context, vmName string) (*computepb.Instance, error) {
	ret := _m.Called(ctx, vmName)

	if len(ret) == 0 {
		panic("no return value specified for CreateVM")
	}

	var r0 *computepb.Instance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*computepb.Instance, error)); ok {
		return rf(ctx, vmName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *computepb.Instance); ok {
		r0 = rf(ctx, vmName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*computepb.Instance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, vmName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGCPClienter_CreateVM_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVM'
type MockGCPClienter_CreateVM_Call struct {
	*mock.Call
}

// CreateVM is a helper method to define mock.On call
//   - ctx context.Context
//   - vmName string
func (_e *MockGCPClienter_Expecter) CreateVM(ctx interface{}, vmName interface{}) *MockGCPClienter_CreateVM_Call {
	return &MockGCPClienter_CreateVM_Call{Call: _e.mock.On("CreateVM", ctx, vmName)}
}

func (_c *MockGCPClienter_CreateVM_Call) Run(run func(ctx context.Context, vmName string)) *MockGCPClienter_CreateVM_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockGCPClienter_CreateVM_Call) Return(_a0 *computepb.Instance, _a1 error) *MockGCPClienter_CreateVM_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGCPClienter_CreateVM_Call) RunAndReturn(run func(context.Context, string) (*computepb.Instance, error)) *MockGCPClienter_CreateVM_Call {
	_c.Call.Return(run)
	return _c
}

// CreateVPCNetwork provides a mock function with given fields: ctx, networkName
func (_m *MockGCPClienter) CreateVPCNetwork(ctx context.Context, networkName string) error {
	ret := _m.Called(ctx, networkName)

	if len(ret) == 0 {
		panic("no return value specified for CreateVPCNetwork")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, networkName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGCPClienter_CreateVPCNetwork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVPCNetwork'
type MockGCPClienter_CreateVPCNetwork_Call struct {
	*mock.Call
}

// CreateVPCNetwork is a helper method to define mock.On call
//   - ctx context.Context
//   - networkName string
func (_e *MockGCPClienter_Expecter) CreateVPCNetwork(ctx interface{}, networkName interface{}) *MockGCPClienter_CreateVPCNetwork_Call {
	return &MockGCPClienter_CreateVPCNetwork_Call{Call: _e.mock.On("CreateVPCNetwork", ctx, networkName)}
}

func (_c *MockGCPClienter_CreateVPCNetwork_Call) Run(run func(ctx context.Context, networkName string)) *MockGCPClienter_CreateVPCNetwork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockGCPClienter_CreateVPCNetwork_Call) Return(_a0 error) *MockGCPClienter_CreateVPCNetwork_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGCPClienter_CreateVPCNetwork_Call) RunAndReturn(run func(context.Context, string) error) *MockGCPClienter_CreateVPCNetwork_Call {
	_c.Call.Return(run)
	return _c
}

// DestroyProject provides a mock function with given fields: ctx, projectID
func (_m *MockGCPClienter) DestroyProject(ctx context.Context, projectID string) error {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for DestroyProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, projectID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGCPClienter_DestroyProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DestroyProject'
type MockGCPClienter_DestroyProject_Call struct {
	*mock.Call
}

// DestroyProject is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
func (_e *MockGCPClienter_Expecter) DestroyProject(ctx interface{}, projectID interface{}) *MockGCPClienter_DestroyProject_Call {
	return &MockGCPClienter_DestroyProject_Call{Call: _e.mock.On("DestroyProject", ctx, projectID)}
}

func (_c *MockGCPClienter_DestroyProject_Call) Run(run func(ctx context.Context, projectID string)) *MockGCPClienter_DestroyProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockGCPClienter_DestroyProject_Call) Return(_a0 error) *MockGCPClienter_DestroyProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGCPClienter_DestroyProject_Call) RunAndReturn(run func(context.Context, string) error) *MockGCPClienter_DestroyProject_Call {
	_c.Call.Return(run)
	return _c
}

// EnableAPI provides a mock function with given fields: ctx, projectID, apiName
func (_m *MockGCPClienter) EnableAPI(ctx context.Context, projectID string, apiName string) error {
	ret := _m.Called(ctx, projectID, apiName)

	if len(ret) == 0 {
		panic("no return value specified for EnableAPI")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectID, apiName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGCPClienter_EnableAPI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableAPI'
type MockGCPClienter_EnableAPI_Call struct {
	*mock.Call
}

// EnableAPI is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - apiName string
func (_e *MockGCPClienter_Expecter) EnableAPI(ctx interface{}, projectID interface{}, apiName interface{}) *MockGCPClienter_EnableAPI_Call {
	return &MockGCPClienter_EnableAPI_Call{Call: _e.mock.On("EnableAPI", ctx, projectID, apiName)}
}

func (_c *MockGCPClienter_EnableAPI_Call) Run(run func(ctx context.Context, projectID string, apiName string)) *MockGCPClienter_EnableAPI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockGCPClienter_EnableAPI_Call) Return(_a0 error) *MockGCPClienter_EnableAPI_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGCPClienter_EnableAPI_Call) RunAndReturn(run func(context.Context, string, string) error) *MockGCPClienter_EnableAPI_Call {
	_c.Call.Return(run)
	return _c
}

// EnsureFirewallRules provides a mock function with given fields: ctx, networkName
func (_m *MockGCPClienter) EnsureFirewallRules(ctx context.Context, networkName string) error {
	ret := _m.Called(ctx, networkName)

	if len(ret) == 0 {
		panic("no return value specified for EnsureFirewallRules")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, networkName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGCPClienter_EnsureFirewallRules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureFirewallRules'
type MockGCPClienter_EnsureFirewallRules_Call struct {
	*mock.Call
}

// EnsureFirewallRules is a helper method to define mock.On call
//   - ctx context.Context
//   - networkName string
func (_e *MockGCPClienter_Expecter) EnsureFirewallRules(ctx interface{}, networkName interface{}) *MockGCPClienter_EnsureFirewallRules_Call {
	return &MockGCPClienter_EnsureFirewallRules_Call{Call: _e.mock.On("EnsureFirewallRules", ctx, networkName)}
}

func (_c *MockGCPClienter_EnsureFirewallRules_Call) Run(run func(ctx context.Context, networkName string)) *MockGCPClienter_EnsureFirewallRules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockGCPClienter_EnsureFirewallRules_Call) Return(_a0 error) *MockGCPClienter_EnsureFirewallRules_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGCPClienter_EnsureFirewallRules_Call) RunAndReturn(run func(context.Context, string) error) *MockGCPClienter_EnsureFirewallRules_Call {
	_c.Call.Return(run)
	return _c
}

// EnsureProject provides a mock function with given fields: ctx, organizationID, projectID
func (_m *MockGCPClienter) EnsureProject(ctx context.Context, organizationID string, projectID string) (string, error) {
	ret := _m.Called(ctx, organizationID, projectID)

	if len(ret) == 0 {
		panic("no return value specified for EnsureProject")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, organizationID, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, organizationID, projectID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, organizationID, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGCPClienter_EnsureProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureProject'
type MockGCPClienter_EnsureProject_Call struct {
	*mock.Call
}

// EnsureProject is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationID string
//   - projectID string
func (_e *MockGCPClienter_Expecter) EnsureProject(ctx interface{}, organizationID interface{}, projectID interface{}) *MockGCPClienter_EnsureProject_Call {
	return &MockGCPClienter_EnsureProject_Call{Call: _e.mock.On("EnsureProject", ctx, organizationID, projectID)}
}

func (_c *MockGCPClienter_EnsureProject_Call) Run(run func(ctx context.Context, organizationID string, projectID string)) *MockGCPClienter_EnsureProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockGCPClienter_EnsureProject_Call) Return(_a0 string, _a1 error) *MockGCPClienter_EnsureProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGCPClienter_EnsureProject_Call) RunAndReturn(run func(context.Context, string, string) (string, error)) *MockGCPClienter_EnsureProject_Call {
	_c.Call.Return(run)
	return _c
}

// EnsureVPCNetwork provides a mock function with given fields: ctx, networkName
func (_m *MockGCPClienter) EnsureVPCNetwork(ctx context.Context, networkName string) error {
	ret := _m.Called(ctx, networkName)

	if len(ret) == 0 {
		panic("no return value specified for EnsureVPCNetwork")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, networkName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGCPClienter_EnsureVPCNetwork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureVPCNetwork'
type MockGCPClienter_EnsureVPCNetwork_Call struct {
	*mock.Call
}

// EnsureVPCNetwork is a helper method to define mock.On call
//   - ctx context.Context
//   - networkName string
func (_e *MockGCPClienter_Expecter) EnsureVPCNetwork(ctx interface{}, networkName interface{}) *MockGCPClienter_EnsureVPCNetwork_Call {
	return &MockGCPClienter_EnsureVPCNetwork_Call{Call: _e.mock.On("EnsureVPCNetwork", ctx, networkName)}
}

func (_c *MockGCPClienter_EnsureVPCNetwork_Call) Run(run func(ctx context.Context, networkName string)) *MockGCPClienter_EnsureVPCNetwork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockGCPClienter_EnsureVPCNetwork_Call) Return(_a0 error) *MockGCPClienter_EnsureVPCNetwork_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGCPClienter_EnsureVPCNetwork_Call) RunAndReturn(run func(context.Context, string) error) *MockGCPClienter_EnsureVPCNetwork_Call {
	_c.Call.Return(run)
	return _c
}

// GetVMExternalIP provides a mock function with given fields: ctx, vmName, locationData
func (_m *MockGCPClienter) GetVMExternalIP(ctx context.Context, vmName string, locationData map[string]string) (string, error) {
	ret := _m.Called(ctx, vmName, locationData)

	if len(ret) == 0 {
		panic("no return value specified for GetVMExternalIP")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) (string, error)); ok {
		return rf(ctx, vmName, locationData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) string); ok {
		r0 = rf(ctx, vmName, locationData)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]string) error); ok {
		r1 = rf(ctx, vmName, locationData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGCPClienter_GetVMExternalIP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVMExternalIP'
type MockGCPClienter_GetVMExternalIP_Call struct {
	*mock.Call
}

// GetVMExternalIP is a helper method to define mock.On call
//   - ctx context.Context
//   - vmName string
//   - locationData map[string]string
func (_e *MockGCPClienter_Expecter) GetVMExternalIP(ctx interface{}, vmName interface{}, locationData interface{}) *MockGCPClienter_GetVMExternalIP_Call {
	return &MockGCPClienter_GetVMExternalIP_Call{Call: _e.mock.On("GetVMExternalIP", ctx, vmName, locationData)}
}

func (_c *MockGCPClienter_GetVMExternalIP_Call) Run(run func(ctx context.Context, vmName string, locationData map[string]string)) *MockGCPClienter_GetVMExternalIP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]string))
	})
	return _c
}

func (_c *MockGCPClienter_GetVMExternalIP_Call) Return(_a0 string, _a1 error) *MockGCPClienter_GetVMExternalIP_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGCPClienter_GetVMExternalIP_Call) RunAndReturn(run func(context.Context, string, map[string]string) (string, error)) *MockGCPClienter_GetVMExternalIP_Call {
	_c.Call.Return(run)
	return _c
}

// GetVMZone provides a mock function with given fields: ctx, projectID, vmName
func (_m *MockGCPClienter) GetVMZone(ctx context.Context, projectID string, vmName string) (string, error) {
	ret := _m.Called(ctx, projectID, vmName)

	if len(ret) == 0 {
		panic("no return value specified for GetVMZone")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, projectID, vmName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, projectID, vmName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projectID, vmName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGCPClienter_GetVMZone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVMZone'
type MockGCPClienter_GetVMZone_Call struct {
	*mock.Call
}

// GetVMZone is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - vmName string
func (_e *MockGCPClienter_Expecter) GetVMZone(ctx interface{}, projectID interface{}, vmName interface{}) *MockGCPClienter_GetVMZone_Call {
	return &MockGCPClienter_GetVMZone_Call{Call: _e.mock.On("GetVMZone", ctx, projectID, vmName)}
}

func (_c *MockGCPClienter_GetVMZone_Call) Run(run func(ctx context.Context, projectID string, vmName string)) *MockGCPClienter_GetVMZone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockGCPClienter_GetVMZone_Call) Return(_a0 string, _a1 error) *MockGCPClienter_GetVMZone_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGCPClienter_GetVMZone_Call) RunAndReturn(run func(context.Context, string, string) (string, error)) *MockGCPClienter_GetVMZone_Call {
	_c.Call.Return(run)
	return _c
}

// IsAPIEnabled provides a mock function with given fields: ctx, projectID, apiName
func (_m *MockGCPClienter) IsAPIEnabled(ctx context.Context, projectID string, apiName string) (bool, error) {
	ret := _m.Called(ctx, projectID, apiName)

	if len(ret) == 0 {
		panic("no return value specified for IsAPIEnabled")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, projectID, apiName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, projectID, apiName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projectID, apiName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGCPClienter_IsAPIEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAPIEnabled'
type MockGCPClienter_IsAPIEnabled_Call struct {
	*mock.Call
}

// IsAPIEnabled is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - apiName string
func (_e *MockGCPClienter_Expecter) IsAPIEnabled(ctx interface{}, projectID interface{}, apiName interface{}) *MockGCPClienter_IsAPIEnabled_Call {
	return &MockGCPClienter_IsAPIEnabled_Call{Call: _e.mock.On("IsAPIEnabled", ctx, projectID, apiName)}
}

func (_c *MockGCPClienter_IsAPIEnabled_Call) Run(run func(ctx context.Context, projectID string, apiName string)) *MockGCPClienter_IsAPIEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockGCPClienter_IsAPIEnabled_Call) Return(_a0 bool, _a1 error) *MockGCPClienter_IsAPIEnabled_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGCPClienter_IsAPIEnabled_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *MockGCPClienter_IsAPIEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllAssetsInProject provides a mock function with given fields: ctx, projectID
func (_m *MockGCPClienter) ListAllAssetsInProject(ctx context.Context, projectID string) ([]*assetpb.Asset, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for ListAllAssetsInProject")
	}

	var r0 []*assetpb.Asset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*assetpb.Asset, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*assetpb.Asset); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*assetpb.Asset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGCPClienter_ListAllAssetsInProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllAssetsInProject'
type MockGCPClienter_ListAllAssetsInProject_Call struct {
	*mock.Call
}

// ListAllAssetsInProject is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
func (_e *MockGCPClienter_Expecter) ListAllAssetsInProject(ctx interface{}, projectID interface{}) *MockGCPClienter_ListAllAssetsInProject_Call {
	return &MockGCPClienter_ListAllAssetsInProject_Call{Call: _e.mock.On("ListAllAssetsInProject", ctx, projectID)}
}

func (_c *MockGCPClienter_ListAllAssetsInProject_Call) Run(run func(ctx context.Context, projectID string)) *MockGCPClienter_ListAllAssetsInProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockGCPClienter_ListAllAssetsInProject_Call) Return(_a0 []*assetpb.Asset, _a1 error) *MockGCPClienter_ListAllAssetsInProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGCPClienter_ListAllAssetsInProject_Call) RunAndReturn(run func(context.Context, string) ([]*assetpb.Asset, error)) *MockGCPClienter_ListAllAssetsInProject_Call {
	_c.Call.Return(run)
	return _c
}

// ListBillingAccounts provides a mock function with given fields: ctx
func (_m *MockGCPClienter) ListBillingAccounts(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListBillingAccounts")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGCPClienter_ListBillingAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBillingAccounts'
type MockGCPClienter_ListBillingAccounts_Call struct {
	*mock.Call
}

// ListBillingAccounts is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockGCPClienter_Expecter) ListBillingAccounts(ctx interface{}) *MockGCPClienter_ListBillingAccounts_Call {
	return &MockGCPClienter_ListBillingAccounts_Call{Call: _e.mock.On("ListBillingAccounts", ctx)}
}

func (_c *MockGCPClienter_ListBillingAccounts_Call) Run(run func(ctx context.Context)) *MockGCPClienter_ListBillingAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockGCPClienter_ListBillingAccounts_Call) Return(_a0 []string, _a1 error) *MockGCPClienter_ListBillingAccounts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGCPClienter_ListBillingAccounts_Call) RunAndReturn(run func(context.Context) ([]string, error)) *MockGCPClienter_ListBillingAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjects provides a mock function with given fields: ctx, req
func (_m *MockGCPClienter) ListProjects(ctx context.Context, req *resourcemanagerpb.ListProjectsRequest) ([]*resourcemanagerpb.Project, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListProjects")
	}

	var r0 []*resourcemanagerpb.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourcemanagerpb.ListProjectsRequest) ([]*resourcemanagerpb.Project, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourcemanagerpb.ListProjectsRequest) []*resourcemanagerpb.Project); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*resourcemanagerpb.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourcemanagerpb.ListProjectsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGCPClienter_ListProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjects'
type MockGCPClienter_ListProjects_Call struct {
	*mock.Call
}

// ListProjects is a helper method to define mock.On call
//   - ctx context.Context
//   - req *resourcemanagerpb.ListProjectsRequest
func (_e *MockGCPClienter_Expecter) ListProjects(ctx interface{}, req interface{}) *MockGCPClienter_ListProjects_Call {
	return &MockGCPClienter_ListProjects_Call{Call: _e.mock.On("ListProjects", ctx, req)}
}

func (_c *MockGCPClienter_ListProjects_Call) Run(run func(ctx context.Context, req *resourcemanagerpb.ListProjectsRequest)) *MockGCPClienter_ListProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*resourcemanagerpb.ListProjectsRequest))
	})
	return _c
}

func (_c *MockGCPClienter_ListProjects_Call) Return(_a0 []*resourcemanagerpb.Project, _a1 error) *MockGCPClienter_ListProjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGCPClienter_ListProjects_Call) RunAndReturn(run func(context.Context, *resourcemanagerpb.ListProjectsRequest) ([]*resourcemanagerpb.Project, error)) *MockGCPClienter_ListProjects_Call {
	_c.Call.Return(run)
	return _c
}

// ProjectExists provides a mock function with given fields: ctx, projectID
func (_m *MockGCPClienter) ProjectExists(ctx context.Context, projectID string) (bool, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for ProjectExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, projectID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGCPClienter_ProjectExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProjectExists'
type MockGCPClienter_ProjectExists_Call struct {
	*mock.Call
}

// ProjectExists is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
func (_e *MockGCPClienter_Expecter) ProjectExists(ctx interface{}, projectID interface{}) *MockGCPClienter_ProjectExists_Call {
	return &MockGCPClienter_ProjectExists_Call{Call: _e.mock.On("ProjectExists", ctx, projectID)}
}

func (_c *MockGCPClienter_ProjectExists_Call) Run(run func(ctx context.Context, projectID string)) *MockGCPClienter_ProjectExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockGCPClienter_ProjectExists_Call) Return(_a0 bool, _a1 error) *MockGCPClienter_ProjectExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGCPClienter_ProjectExists_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockGCPClienter_ProjectExists_Call {
	_c.Call.Return(run)
	return _c
}

// SetBillingAccount provides a mock function with given fields: ctx, billingAccountID
func (_m *MockGCPClienter) SetBillingAccount(ctx context.Context, billingAccountID string) error {
	ret := _m.Called(ctx, billingAccountID)

	if len(ret) == 0 {
		panic("no return value specified for SetBillingAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, billingAccountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGCPClienter_SetBillingAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetBillingAccount'
type MockGCPClienter_SetBillingAccount_Call struct {
	*mock.Call
}

// SetBillingAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - billingAccountID string
func (_e *MockGCPClienter_Expecter) SetBillingAccount(ctx interface{}, billingAccountID interface{}) *MockGCPClienter_SetBillingAccount_Call {
	return &MockGCPClienter_SetBillingAccount_Call{Call: _e.mock.On("SetBillingAccount", ctx, billingAccountID)}
}

func (_c *MockGCPClienter_SetBillingAccount_Call) Run(run func(ctx context.Context, billingAccountID string)) *MockGCPClienter_SetBillingAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockGCPClienter_SetBillingAccount_Call) Return(_a0 error) *MockGCPClienter_SetBillingAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGCPClienter_SetBillingAccount_Call) RunAndReturn(run func(context.Context, string) error) *MockGCPClienter_SetBillingAccount_Call {
	_c.Call.Return(run)
	return _c
}

// StartResourcePolling provides a mock function with given fields: ctx
func (_m *MockGCPClienter) StartResourcePolling(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for StartResourcePolling")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGCPClienter_StartResourcePolling_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartResourcePolling'
type MockGCPClienter_StartResourcePolling_Call struct {
	*mock.Call
}

// StartResourcePolling is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockGCPClienter_Expecter) StartResourcePolling(ctx interface{}) *MockGCPClienter_StartResourcePolling_Call {
	return &MockGCPClienter_StartResourcePolling_Call{Call: _e.mock.On("StartResourcePolling", ctx)}
}

func (_c *MockGCPClienter_StartResourcePolling_Call) Run(run func(ctx context.Context)) *MockGCPClienter_StartResourcePolling_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockGCPClienter_StartResourcePolling_Call) Return(_a0 error) *MockGCPClienter_StartResourcePolling_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGCPClienter_StartResourcePolling_Call) RunAndReturn(run func(context.Context) error) *MockGCPClienter_StartResourcePolling_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateMachineType provides a mock function with given fields: ctx, machineType, location
func (_m *MockGCPClienter) ValidateMachineType(ctx context.Context, machineType string, location string) (bool, error) {
	ret := _m.Called(ctx, machineType, location)

	if len(ret) == 0 {
		panic("no return value specified for ValidateMachineType")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, machineType, location)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, machineType, location)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, machineType, location)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGCPClienter_ValidateMachineType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateMachineType'
type MockGCPClienter_ValidateMachineType_Call struct {
	*mock.Call
}

// ValidateMachineType is a helper method to define mock.On call
//   - ctx context.Context
//   - machineType string
//   - location string
func (_e *MockGCPClienter_Expecter) ValidateMachineType(ctx interface{}, machineType interface{}, location interface{}) *MockGCPClienter_ValidateMachineType_Call {
	return &MockGCPClienter_ValidateMachineType_Call{Call: _e.mock.On("ValidateMachineType", ctx, machineType, location)}
}

func (_c *MockGCPClienter_ValidateMachineType_Call) Run(run func(ctx context.Context, machineType string, location string)) *MockGCPClienter_ValidateMachineType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockGCPClienter_ValidateMachineType_Call) Return(_a0 bool, _a1 error) *MockGCPClienter_ValidateMachineType_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGCPClienter_ValidateMachineType_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *MockGCPClienter_ValidateMachineType_Call {
	_c.Call.Return(run)
	return _c
}

// WaitForGlobalOperation provides a mock function with given fields: ctx, project, operation
func (_m *MockGCPClienter) WaitForGlobalOperation(ctx context.Context, project string, operation string) error {
	ret := _m.Called(ctx, project, operation)

	if len(ret) == 0 {
		panic("no return value specified for WaitForGlobalOperation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, project, operation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGCPClienter_WaitForGlobalOperation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitForGlobalOperation'
type MockGCPClienter_WaitForGlobalOperation_Call struct {
	*mock.Call
}

// WaitForGlobalOperation is a helper method to define mock.On call
//   - ctx context.Context
//   - project string
//   - operation string
func (_e *MockGCPClienter_Expecter) WaitForGlobalOperation(ctx interface{}, project interface{}, operation interface{}) *MockGCPClienter_WaitForGlobalOperation_Call {
	return &MockGCPClienter_WaitForGlobalOperation_Call{Call: _e.mock.On("WaitForGlobalOperation", ctx, project, operation)}
}

func (_c *MockGCPClienter_WaitForGlobalOperation_Call) Run(run func(ctx context.Context, project string, operation string)) *MockGCPClienter_WaitForGlobalOperation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockGCPClienter_WaitForGlobalOperation_Call) Return(_a0 error) *MockGCPClienter_WaitForGlobalOperation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGCPClienter_WaitForGlobalOperation_Call) RunAndReturn(run func(context.Context, string, string) error) *MockGCPClienter_WaitForGlobalOperation_Call {
	_c.Call.Return(run)
	return _c
}

// WaitForOperation provides a mock function with given fields: ctx, project, zone, operation
func (_m *MockGCPClienter) WaitForOperation(ctx context.Context, project string, zone string, operation string) error {
	ret := _m.Called(ctx, project, zone, operation)

	if len(ret) == 0 {
		panic("no return value specified for WaitForOperation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, project, zone, operation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGCPClienter_WaitForOperation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitForOperation'
type MockGCPClienter_WaitForOperation_Call struct {
	*mock.Call
}

// WaitForOperation is a helper method to define mock.On call
//   - ctx context.Context
//   - project string
//   - zone string
//   - operation string
func (_e *MockGCPClienter_Expecter) WaitForOperation(ctx interface{}, project interface{}, zone interface{}, operation interface{}) *MockGCPClienter_WaitForOperation_Call {
	return &MockGCPClienter_WaitForOperation_Call{Call: _e.mock.On("WaitForOperation", ctx, project, zone, operation)}
}

func (_c *MockGCPClienter_WaitForOperation_Call) Run(run func(ctx context.Context, project string, zone string, operation string)) *MockGCPClienter_WaitForOperation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockGCPClienter_WaitForOperation_Call) Return(_a0 error) *MockGCPClienter_WaitForOperation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGCPClienter_WaitForOperation_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockGCPClienter_WaitForOperation_Call {
	_c.Call.Return(run)
	return _c
}

// WaitForRegionalOperation provides a mock function with given fields: ctx, project, region, operation
func (_m *MockGCPClienter) WaitForRegionalOperation(ctx context.Context, project string, region string, operation string) error {
	ret := _m.Called(ctx, project, region, operation)

	if len(ret) == 0 {
		panic("no return value specified for WaitForRegionalOperation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, project, region, operation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGCPClienter_WaitForRegionalOperation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitForRegionalOperation'
type MockGCPClienter_WaitForRegionalOperation_Call struct {
	*mock.Call
}

// WaitForRegionalOperation is a helper method to define mock.On call
//   - ctx context.Context
//   - project string
//   - region string
//   - operation string
func (_e *MockGCPClienter_Expecter) WaitForRegionalOperation(ctx interface{}, project interface{}, region interface{}, operation interface{}) *MockGCPClienter_WaitForRegionalOperation_Call {
	return &MockGCPClienter_WaitForRegionalOperation_Call{Call: _e.mock.On("WaitForRegionalOperation", ctx, project, region, operation)}
}

func (_c *MockGCPClienter_WaitForRegionalOperation_Call) Run(run func(ctx context.Context, project string, region string, operation string)) *MockGCPClienter_WaitForRegionalOperation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockGCPClienter_WaitForRegionalOperation_Call) Return(_a0 error) *MockGCPClienter_WaitForRegionalOperation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGCPClienter_WaitForRegionalOperation_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockGCPClienter_WaitForRegionalOperation_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGCPClienter creates a new instance of MockGCPClienter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGCPClienter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGCPClienter {
	mock := &MockGCPClienter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
