// Code generated by mockery v2.50.1. DO NOT EDIT.

package azure_interface

import (
	armresources "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armresources"

	context "context"

	http "net/http"

	mock "github.com/stretchr/testify/mock"

	runtime "github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// MockPollerer is an autogenerated mock type for the Pollerer type
type MockPollerer struct {
	mock.Mock
}

type MockPollerer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPollerer) EXPECT() *MockPollerer_Expecter {
	return &MockPollerer_Expecter{mock: &_m.Mock}
}

// Done provides a mock function with no fields
func (_m *MockPollerer) Done() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockPollerer_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockPollerer_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockPollerer_Expecter) Done() *MockPollerer_Done_Call {
	return &MockPollerer_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *MockPollerer_Done_Call) Run(run func()) *MockPollerer_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPollerer_Done_Call) Return(_a0 bool) *MockPollerer_Done_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPollerer_Done_Call) RunAndReturn(run func() bool) *MockPollerer_Done_Call {
	_c.Call.Return(run)
	return _c
}

// Poll provides a mock function with given fields: ctx
func (_m *MockPollerer) Poll(ctx context.Context) (*http.Response, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Poll")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*http.Response, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *http.Response); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPollerer_Poll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Poll'
type MockPollerer_Poll_Call struct {
	*mock.Call
}

// Poll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPollerer_Expecter) Poll(ctx interface{}) *MockPollerer_Poll_Call {
	return &MockPollerer_Poll_Call{Call: _e.mock.On("Poll", ctx)}
}

func (_c *MockPollerer_Poll_Call) Run(run func(ctx context.Context)) *MockPollerer_Poll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockPollerer_Poll_Call) Return(_a0 *http.Response, _a1 error) *MockPollerer_Poll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPollerer_Poll_Call) RunAndReturn(run func(context.Context) (*http.Response, error)) *MockPollerer_Poll_Call {
	_c.Call.Return(run)
	return _c
}

// PollUntilDone provides a mock function with given fields: ctx, options
func (_m *MockPollerer) PollUntilDone(ctx context.Context, options *runtime.PollUntilDoneOptions) (armresources.DeploymentsClientCreateOrUpdateResponse, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for PollUntilDone")
	}

	var r0 armresources.DeploymentsClientCreateOrUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *runtime.PollUntilDoneOptions) (armresources.DeploymentsClientCreateOrUpdateResponse, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *runtime.PollUntilDoneOptions) armresources.DeploymentsClientCreateOrUpdateResponse); ok {
		r0 = rf(ctx, options)
	} else {
		r0 = ret.Get(0).(armresources.DeploymentsClientCreateOrUpdateResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *runtime.PollUntilDoneOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPollerer_PollUntilDone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PollUntilDone'
type MockPollerer_PollUntilDone_Call struct {
	*mock.Call
}

// PollUntilDone is a helper method to define mock.On call
//   - ctx context.Context
//   - options *runtime.PollUntilDoneOptions
func (_e *MockPollerer_Expecter) PollUntilDone(ctx interface{}, options interface{}) *MockPollerer_PollUntilDone_Call {
	return &MockPollerer_PollUntilDone_Call{Call: _e.mock.On("PollUntilDone", ctx, options)}
}

func (_c *MockPollerer_PollUntilDone_Call) Run(run func(ctx context.Context, options *runtime.PollUntilDoneOptions)) *MockPollerer_PollUntilDone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*runtime.PollUntilDoneOptions))
	})
	return _c
}

func (_c *MockPollerer_PollUntilDone_Call) Return(_a0 armresources.DeploymentsClientCreateOrUpdateResponse, _a1 error) *MockPollerer_PollUntilDone_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPollerer_PollUntilDone_Call) RunAndReturn(run func(context.Context, *runtime.PollUntilDoneOptions) (armresources.DeploymentsClientCreateOrUpdateResponse, error)) *MockPollerer_PollUntilDone_Call {
	_c.Call.Return(run)
	return _c
}

// Result provides a mock function with given fields: ctx
func (_m *MockPollerer) Result(ctx context.Context) (armresources.DeploymentsClientCreateOrUpdateResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Result")
	}

	var r0 armresources.DeploymentsClientCreateOrUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (armresources.DeploymentsClientCreateOrUpdateResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) armresources.DeploymentsClientCreateOrUpdateResponse); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(armresources.DeploymentsClientCreateOrUpdateResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPollerer_Result_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Result'
type MockPollerer_Result_Call struct {
	*mock.Call
}

// Result is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPollerer_Expecter) Result(ctx interface{}) *MockPollerer_Result_Call {
	return &MockPollerer_Result_Call{Call: _e.mock.On("Result", ctx)}
}

func (_c *MockPollerer_Result_Call) Run(run func(ctx context.Context)) *MockPollerer_Result_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockPollerer_Result_Call) Return(_a0 armresources.DeploymentsClientCreateOrUpdateResponse, _a1 error) *MockPollerer_Result_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPollerer_Result_Call) RunAndReturn(run func(context.Context) (armresources.DeploymentsClientCreateOrUpdateResponse, error)) *MockPollerer_Result_Call {
	_c.Call.Return(run)
	return _c
}

// ResumeToken provides a mock function with no fields
func (_m *MockPollerer) ResumeToken() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ResumeToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPollerer_ResumeToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResumeToken'
type MockPollerer_ResumeToken_Call struct {
	*mock.Call
}

// ResumeToken is a helper method to define mock.On call
func (_e *MockPollerer_Expecter) ResumeToken() *MockPollerer_ResumeToken_Call {
	return &MockPollerer_ResumeToken_Call{Call: _e.mock.On("ResumeToken")}
}

func (_c *MockPollerer_ResumeToken_Call) Run(run func()) *MockPollerer_ResumeToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPollerer_ResumeToken_Call) Return(_a0 string, _a1 error) *MockPollerer_ResumeToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPollerer_ResumeToken_Call) RunAndReturn(run func() (string, error)) *MockPollerer_ResumeToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPollerer creates a new instance of MockPollerer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPollerer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPollerer {
	mock := &MockPollerer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
