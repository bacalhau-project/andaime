// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	ssh "golang.org/x/crypto/ssh"

	sshutils "github.com/bacalhau-project/andaime/pkg/models/interfaces/sshutils"

	time "time"
)

// MockSSHConfiger is an autogenerated mock type for the SSHConfiger type
type MockSSHConfiger struct {
	mock.Mock
}

type MockSSHConfiger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSSHConfiger) EXPECT() *MockSSHConfiger_Expecter {
	return &MockSSHConfiger_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockSSHConfiger) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSSHConfiger_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockSSHConfiger_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockSSHConfiger_Expecter) Close() *MockSSHConfiger_Close_Call {
	return &MockSSHConfiger_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockSSHConfiger_Close_Call) Run(run func()) *MockSSHConfiger_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSSHConfiger_Close_Call) Return(_a0 error) *MockSSHConfiger_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSSHConfiger_Close_Call) RunAndReturn(run func() error) *MockSSHConfiger_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Connect provides a mock function with given fields:
func (_m *MockSSHConfiger) Connect() (sshutils.SSHClienter, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 sshutils.SSHClienter
	var r1 error
	if rf, ok := ret.Get(0).(func() (sshutils.SSHClienter, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() sshutils.SSHClienter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sshutils.SSHClienter)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSSHConfiger_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type MockSSHConfiger_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
func (_e *MockSSHConfiger_Expecter) Connect() *MockSSHConfiger_Connect_Call {
	return &MockSSHConfiger_Connect_Call{Call: _e.mock.On("Connect")}
}

func (_c *MockSSHConfiger_Connect_Call) Run(run func()) *MockSSHConfiger_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSSHConfiger_Connect_Call) Return(_a0 sshutils.SSHClienter, _a1 error) *MockSSHConfiger_Connect_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSSHConfiger_Connect_Call) RunAndReturn(run func() (sshutils.SSHClienter, error)) *MockSSHConfiger_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteCommand provides a mock function with given fields: ctx, command
func (_m *MockSSHConfiger) ExecuteCommand(ctx context.Context, command string) (string, error) {
	ret := _m.Called(ctx, command)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteCommand")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, command)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, command)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, command)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSSHConfiger_ExecuteCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteCommand'
type MockSSHConfiger_ExecuteCommand_Call struct {
	*mock.Call
}

// ExecuteCommand is a helper method to define mock.On call
//   - ctx context.Context
//   - command string
func (_e *MockSSHConfiger_Expecter) ExecuteCommand(ctx interface{}, command interface{}) *MockSSHConfiger_ExecuteCommand_Call {
	return &MockSSHConfiger_ExecuteCommand_Call{Call: _e.mock.On("ExecuteCommand", ctx, command)}
}

func (_c *MockSSHConfiger_ExecuteCommand_Call) Run(run func(ctx context.Context, command string)) *MockSSHConfiger_ExecuteCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSSHConfiger_ExecuteCommand_Call) Return(_a0 string, _a1 error) *MockSSHConfiger_ExecuteCommand_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSSHConfiger_ExecuteCommand_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockSSHConfiger_ExecuteCommand_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteCommandWithCallback provides a mock function with given fields: ctx, command, callback
func (_m *MockSSHConfiger) ExecuteCommandWithCallback(ctx context.Context, command string, callback func(string)) (string, error) {
	ret := _m.Called(ctx, command, callback)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteCommandWithCallback")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, func(string)) (string, error)); ok {
		return rf(ctx, command, callback)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, func(string)) string); ok {
		r0 = rf(ctx, command, callback)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, func(string)) error); ok {
		r1 = rf(ctx, command, callback)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSSHConfiger_ExecuteCommandWithCallback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteCommandWithCallback'
type MockSSHConfiger_ExecuteCommandWithCallback_Call struct {
	*mock.Call
}

// ExecuteCommandWithCallback is a helper method to define mock.On call
//   - ctx context.Context
//   - command string
//   - callback func(string)
func (_e *MockSSHConfiger_Expecter) ExecuteCommandWithCallback(ctx interface{}, command interface{}, callback interface{}) *MockSSHConfiger_ExecuteCommandWithCallback_Call {
	return &MockSSHConfiger_ExecuteCommandWithCallback_Call{Call: _e.mock.On("ExecuteCommandWithCallback", ctx, command, callback)}
}

func (_c *MockSSHConfiger_ExecuteCommandWithCallback_Call) Run(run func(ctx context.Context, command string, callback func(string))) *MockSSHConfiger_ExecuteCommandWithCallback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(func(string)))
	})
	return _c
}

func (_c *MockSSHConfiger_ExecuteCommandWithCallback_Call) Return(_a0 string, _a1 error) *MockSSHConfiger_ExecuteCommandWithCallback_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSSHConfiger_ExecuteCommandWithCallback_Call) RunAndReturn(run func(context.Context, string, func(string)) (string, error)) *MockSSHConfiger_ExecuteCommandWithCallback_Call {
	_c.Call.Return(run)
	return _c
}

// GetHost provides a mock function with given fields:
func (_m *MockSSHConfiger) GetHost() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHost")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockSSHConfiger_GetHost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHost'
type MockSSHConfiger_GetHost_Call struct {
	*mock.Call
}

// GetHost is a helper method to define mock.On call
func (_e *MockSSHConfiger_Expecter) GetHost() *MockSSHConfiger_GetHost_Call {
	return &MockSSHConfiger_GetHost_Call{Call: _e.mock.On("GetHost")}
}

func (_c *MockSSHConfiger_GetHost_Call) Run(run func()) *MockSSHConfiger_GetHost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSSHConfiger_GetHost_Call) Return(_a0 string) *MockSSHConfiger_GetHost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSSHConfiger_GetHost_Call) RunAndReturn(run func() string) *MockSSHConfiger_GetHost_Call {
	_c.Call.Return(run)
	return _c
}

// GetPort provides a mock function with given fields:
func (_m *MockSSHConfiger) GetPort() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPort")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockSSHConfiger_GetPort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPort'
type MockSSHConfiger_GetPort_Call struct {
	*mock.Call
}

// GetPort is a helper method to define mock.On call
func (_e *MockSSHConfiger_Expecter) GetPort() *MockSSHConfiger_GetPort_Call {
	return &MockSSHConfiger_GetPort_Call{Call: _e.mock.On("GetPort")}
}

func (_c *MockSSHConfiger_GetPort_Call) Run(run func()) *MockSSHConfiger_GetPort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSSHConfiger_GetPort_Call) Return(_a0 int) *MockSSHConfiger_GetPort_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSSHConfiger_GetPort_Call) RunAndReturn(run func() int) *MockSSHConfiger_GetPort_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrivateKeyMaterial provides a mock function with given fields:
func (_m *MockSSHConfiger) GetPrivateKeyMaterial() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPrivateKeyMaterial")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockSSHConfiger_GetPrivateKeyMaterial_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrivateKeyMaterial'
type MockSSHConfiger_GetPrivateKeyMaterial_Call struct {
	*mock.Call
}

// GetPrivateKeyMaterial is a helper method to define mock.On call
func (_e *MockSSHConfiger_Expecter) GetPrivateKeyMaterial() *MockSSHConfiger_GetPrivateKeyMaterial_Call {
	return &MockSSHConfiger_GetPrivateKeyMaterial_Call{Call: _e.mock.On("GetPrivateKeyMaterial")}
}

func (_c *MockSSHConfiger_GetPrivateKeyMaterial_Call) Run(run func()) *MockSSHConfiger_GetPrivateKeyMaterial_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSSHConfiger_GetPrivateKeyMaterial_Call) Return(_a0 []byte) *MockSSHConfiger_GetPrivateKeyMaterial_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSSHConfiger_GetPrivateKeyMaterial_Call) RunAndReturn(run func() []byte) *MockSSHConfiger_GetPrivateKeyMaterial_Call {
	_c.Call.Return(run)
	return _c
}

// GetSFTPClientCreator provides a mock function with given fields:
func (_m *MockSSHConfiger) GetSFTPClientCreator() sshutils.SFTPClientCreator {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSFTPClientCreator")
	}

	var r0 sshutils.SFTPClientCreator
	if rf, ok := ret.Get(0).(func() sshutils.SFTPClientCreator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sshutils.SFTPClientCreator)
		}
	}

	return r0
}

// MockSSHConfiger_GetSFTPClientCreator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSFTPClientCreator'
type MockSSHConfiger_GetSFTPClientCreator_Call struct {
	*mock.Call
}

// GetSFTPClientCreator is a helper method to define mock.On call
func (_e *MockSSHConfiger_Expecter) GetSFTPClientCreator() *MockSSHConfiger_GetSFTPClientCreator_Call {
	return &MockSSHConfiger_GetSFTPClientCreator_Call{Call: _e.mock.On("GetSFTPClientCreator")}
}

func (_c *MockSSHConfiger_GetSFTPClientCreator_Call) Run(run func()) *MockSSHConfiger_GetSFTPClientCreator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSSHConfiger_GetSFTPClientCreator_Call) Return(_a0 sshutils.SFTPClientCreator) *MockSSHConfiger_GetSFTPClientCreator_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSSHConfiger_GetSFTPClientCreator_Call) RunAndReturn(run func() sshutils.SFTPClientCreator) *MockSSHConfiger_GetSFTPClientCreator_Call {
	_c.Call.Return(run)
	return _c
}

// GetSSHClient provides a mock function with given fields:
func (_m *MockSSHConfiger) GetSSHClient() *ssh.Client {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSSHClient")
	}

	var r0 *ssh.Client
	if rf, ok := ret.Get(0).(func() *ssh.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssh.Client)
		}
	}

	return r0
}

// MockSSHConfiger_GetSSHClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSSHClient'
type MockSSHConfiger_GetSSHClient_Call struct {
	*mock.Call
}

// GetSSHClient is a helper method to define mock.On call
func (_e *MockSSHConfiger_Expecter) GetSSHClient() *MockSSHConfiger_GetSSHClient_Call {
	return &MockSSHConfiger_GetSSHClient_Call{Call: _e.mock.On("GetSSHClient")}
}

func (_c *MockSSHConfiger_GetSSHClient_Call) Run(run func()) *MockSSHConfiger_GetSSHClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSSHConfiger_GetSSHClient_Call) Return(_a0 *ssh.Client) *MockSSHConfiger_GetSSHClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSSHConfiger_GetSSHClient_Call) RunAndReturn(run func() *ssh.Client) *MockSSHConfiger_GetSSHClient_Call {
	_c.Call.Return(run)
	return _c
}

// GetSSHClientCreator provides a mock function with given fields:
func (_m *MockSSHConfiger) GetSSHClientCreator() sshutils.SSHClientCreator {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSSHClientCreator")
	}

	var r0 sshutils.SSHClientCreator
	if rf, ok := ret.Get(0).(func() sshutils.SSHClientCreator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sshutils.SSHClientCreator)
		}
	}

	return r0
}

// MockSSHConfiger_GetSSHClientCreator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSSHClientCreator'
type MockSSHConfiger_GetSSHClientCreator_Call struct {
	*mock.Call
}

// GetSSHClientCreator is a helper method to define mock.On call
func (_e *MockSSHConfiger_Expecter) GetSSHClientCreator() *MockSSHConfiger_GetSSHClientCreator_Call {
	return &MockSSHConfiger_GetSSHClientCreator_Call{Call: _e.mock.On("GetSSHClientCreator")}
}

func (_c *MockSSHConfiger_GetSSHClientCreator_Call) Run(run func()) *MockSSHConfiger_GetSSHClientCreator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSSHConfiger_GetSSHClientCreator_Call) Return(_a0 sshutils.SSHClientCreator) *MockSSHConfiger_GetSSHClientCreator_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSSHConfiger_GetSSHClientCreator_Call) RunAndReturn(run func() sshutils.SSHClientCreator) *MockSSHConfiger_GetSSHClientCreator_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields:
func (_m *MockSSHConfiger) GetUser() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockSSHConfiger_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockSSHConfiger_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
func (_e *MockSSHConfiger_Expecter) GetUser() *MockSSHConfiger_GetUser_Call {
	return &MockSSHConfiger_GetUser_Call{Call: _e.mock.On("GetUser")}
}

func (_c *MockSSHConfiger_GetUser_Call) Run(run func()) *MockSSHConfiger_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSSHConfiger_GetUser_Call) Return(_a0 string) *MockSSHConfiger_GetUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSSHConfiger_GetUser_Call) RunAndReturn(run func() string) *MockSSHConfiger_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// InstallSystemdService provides a mock function with given fields: ctx, serviceName, serviceContent
func (_m *MockSSHConfiger) InstallSystemdService(ctx context.Context, serviceName string, serviceContent string) error {
	ret := _m.Called(ctx, serviceName, serviceContent)

	if len(ret) == 0 {
		panic("no return value specified for InstallSystemdService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, serviceName, serviceContent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSSHConfiger_InstallSystemdService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InstallSystemdService'
type MockSSHConfiger_InstallSystemdService_Call struct {
	*mock.Call
}

// InstallSystemdService is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceName string
//   - serviceContent string
func (_e *MockSSHConfiger_Expecter) InstallSystemdService(ctx interface{}, serviceName interface{}, serviceContent interface{}) *MockSSHConfiger_InstallSystemdService_Call {
	return &MockSSHConfiger_InstallSystemdService_Call{Call: _e.mock.On("InstallSystemdService", ctx, serviceName, serviceContent)}
}

func (_c *MockSSHConfiger_InstallSystemdService_Call) Run(run func(ctx context.Context, serviceName string, serviceContent string)) *MockSSHConfiger_InstallSystemdService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSSHConfiger_InstallSystemdService_Call) Return(_a0 error) *MockSSHConfiger_InstallSystemdService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSSHConfiger_InstallSystemdService_Call) RunAndReturn(run func(context.Context, string, string) error) *MockSSHConfiger_InstallSystemdService_Call {
	_c.Call.Return(run)
	return _c
}

// IsConnected provides a mock function with given fields:
func (_m *MockSSHConfiger) IsConnected() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsConnected")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockSSHConfiger_IsConnected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsConnected'
type MockSSHConfiger_IsConnected_Call struct {
	*mock.Call
}

// IsConnected is a helper method to define mock.On call
func (_e *MockSSHConfiger_Expecter) IsConnected() *MockSSHConfiger_IsConnected_Call {
	return &MockSSHConfiger_IsConnected_Call{Call: _e.mock.On("IsConnected")}
}

func (_c *MockSSHConfiger_IsConnected_Call) Run(run func()) *MockSSHConfiger_IsConnected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSSHConfiger_IsConnected_Call) Return(_a0 bool) *MockSSHConfiger_IsConnected_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSSHConfiger_IsConnected_Call) RunAndReturn(run func() bool) *MockSSHConfiger_IsConnected_Call {
	_c.Call.Return(run)
	return _c
}

// PushFile provides a mock function with given fields: ctx, remotePath, content, executable
func (_m *MockSSHConfiger) PushFile(ctx context.Context, remotePath string, content []byte, executable bool) error {
	ret := _m.Called(ctx, remotePath, content, executable)

	if len(ret) == 0 {
		panic("no return value specified for PushFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte, bool) error); ok {
		r0 = rf(ctx, remotePath, content, executable)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSSHConfiger_PushFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PushFile'
type MockSSHConfiger_PushFile_Call struct {
	*mock.Call
}

// PushFile is a helper method to define mock.On call
//   - ctx context.Context
//   - remotePath string
//   - content []byte
//   - executable bool
func (_e *MockSSHConfiger_Expecter) PushFile(ctx interface{}, remotePath interface{}, content interface{}, executable interface{}) *MockSSHConfiger_PushFile_Call {
	return &MockSSHConfiger_PushFile_Call{Call: _e.mock.On("PushFile", ctx, remotePath, content, executable)}
}

func (_c *MockSSHConfiger_PushFile_Call) Run(run func(ctx context.Context, remotePath string, content []byte, executable bool)) *MockSSHConfiger_PushFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte), args[3].(bool))
	})
	return _c
}

func (_c *MockSSHConfiger_PushFile_Call) Return(_a0 error) *MockSSHConfiger_PushFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSSHConfiger_PushFile_Call) RunAndReturn(run func(context.Context, string, []byte, bool) error) *MockSSHConfiger_PushFile_Call {
	_c.Call.Return(run)
	return _c
}

// PushFileWithCallback provides a mock function with given fields: ctx, remotePath, content, executable, callback
func (_m *MockSSHConfiger) PushFileWithCallback(ctx context.Context, remotePath string, content []byte, executable bool, callback func(int64, int64)) error {
	ret := _m.Called(ctx, remotePath, content, executable, callback)

	if len(ret) == 0 {
		panic("no return value specified for PushFileWithCallback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte, bool, func(int64, int64)) error); ok {
		r0 = rf(ctx, remotePath, content, executable, callback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSSHConfiger_PushFileWithCallback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PushFileWithCallback'
type MockSSHConfiger_PushFileWithCallback_Call struct {
	*mock.Call
}

// PushFileWithCallback is a helper method to define mock.On call
//   - ctx context.Context
//   - remotePath string
//   - content []byte
//   - executable bool
//   - callback func(int64 , int64)
func (_e *MockSSHConfiger_Expecter) PushFileWithCallback(ctx interface{}, remotePath interface{}, content interface{}, executable interface{}, callback interface{}) *MockSSHConfiger_PushFileWithCallback_Call {
	return &MockSSHConfiger_PushFileWithCallback_Call{Call: _e.mock.On("PushFileWithCallback", ctx, remotePath, content, executable, callback)}
}

func (_c *MockSSHConfiger_PushFileWithCallback_Call) Run(run func(ctx context.Context, remotePath string, content []byte, executable bool, callback func(int64, int64))) *MockSSHConfiger_PushFileWithCallback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte), args[3].(bool), args[4].(func(int64, int64)))
	})
	return _c
}

func (_c *MockSSHConfiger_PushFileWithCallback_Call) Return(_a0 error) *MockSSHConfiger_PushFileWithCallback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSSHConfiger_PushFileWithCallback_Call) RunAndReturn(run func(context.Context, string, []byte, bool, func(int64, int64)) error) *MockSSHConfiger_PushFileWithCallback_Call {
	_c.Call.Return(run)
	return _c
}

// RestartService provides a mock function with given fields: ctx, serviceName
func (_m *MockSSHConfiger) RestartService(ctx context.Context, serviceName string) (string, error) {
	ret := _m.Called(ctx, serviceName)

	if len(ret) == 0 {
		panic("no return value specified for RestartService")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, serviceName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, serviceName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, serviceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSSHConfiger_RestartService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestartService'
type MockSSHConfiger_RestartService_Call struct {
	*mock.Call
}

// RestartService is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceName string
func (_e *MockSSHConfiger_Expecter) RestartService(ctx interface{}, serviceName interface{}) *MockSSHConfiger_RestartService_Call {
	return &MockSSHConfiger_RestartService_Call{Call: _e.mock.On("RestartService", ctx, serviceName)}
}

func (_c *MockSSHConfiger_RestartService_Call) Run(run func(ctx context.Context, serviceName string)) *MockSSHConfiger_RestartService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSSHConfiger_RestartService_Call) Return(_a0 string, _a1 error) *MockSSHConfiger_RestartService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSSHConfiger_RestartService_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockSSHConfiger_RestartService_Call {
	_c.Call.Return(run)
	return _c
}

// SetSFTPClientCreator provides a mock function with given fields: clientCreator
func (_m *MockSSHConfiger) SetSFTPClientCreator(clientCreator sshutils.SFTPClientCreator) {
	_m.Called(clientCreator)
}

// MockSSHConfiger_SetSFTPClientCreator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSFTPClientCreator'
type MockSSHConfiger_SetSFTPClientCreator_Call struct {
	*mock.Call
}

// SetSFTPClientCreator is a helper method to define mock.On call
//   - clientCreator sshutils.SFTPClientCreator
func (_e *MockSSHConfiger_Expecter) SetSFTPClientCreator(clientCreator interface{}) *MockSSHConfiger_SetSFTPClientCreator_Call {
	return &MockSSHConfiger_SetSFTPClientCreator_Call{Call: _e.mock.On("SetSFTPClientCreator", clientCreator)}
}

func (_c *MockSSHConfiger_SetSFTPClientCreator_Call) Run(run func(clientCreator sshutils.SFTPClientCreator)) *MockSSHConfiger_SetSFTPClientCreator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(sshutils.SFTPClientCreator))
	})
	return _c
}

func (_c *MockSSHConfiger_SetSFTPClientCreator_Call) Return() *MockSSHConfiger_SetSFTPClientCreator_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSSHConfiger_SetSFTPClientCreator_Call) RunAndReturn(run func(sshutils.SFTPClientCreator)) *MockSSHConfiger_SetSFTPClientCreator_Call {
	_c.Call.Return(run)
	return _c
}

// SetSSHClient provides a mock function with given fields: client
func (_m *MockSSHConfiger) SetSSHClient(client *ssh.Client) {
	_m.Called(client)
}

// MockSSHConfiger_SetSSHClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSSHClient'
type MockSSHConfiger_SetSSHClient_Call struct {
	*mock.Call
}

// SetSSHClient is a helper method to define mock.On call
//   - client *ssh.Client
func (_e *MockSSHConfiger_Expecter) SetSSHClient(client interface{}) *MockSSHConfiger_SetSSHClient_Call {
	return &MockSSHConfiger_SetSSHClient_Call{Call: _e.mock.On("SetSSHClient", client)}
}

func (_c *MockSSHConfiger_SetSSHClient_Call) Run(run func(client *ssh.Client)) *MockSSHConfiger_SetSSHClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*ssh.Client))
	})
	return _c
}

func (_c *MockSSHConfiger_SetSSHClient_Call) Return() *MockSSHConfiger_SetSSHClient_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSSHConfiger_SetSSHClient_Call) RunAndReturn(run func(*ssh.Client)) *MockSSHConfiger_SetSSHClient_Call {
	_c.Call.Return(run)
	return _c
}

// SetSSHClientCreator provides a mock function with given fields: clientCreator
func (_m *MockSSHConfiger) SetSSHClientCreator(clientCreator sshutils.SSHClientCreator) {
	_m.Called(clientCreator)
}

// MockSSHConfiger_SetSSHClientCreator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSSHClientCreator'
type MockSSHConfiger_SetSSHClientCreator_Call struct {
	*mock.Call
}

// SetSSHClientCreator is a helper method to define mock.On call
//   - clientCreator sshutils.SSHClientCreator
func (_e *MockSSHConfiger_Expecter) SetSSHClientCreator(clientCreator interface{}) *MockSSHConfiger_SetSSHClientCreator_Call {
	return &MockSSHConfiger_SetSSHClientCreator_Call{Call: _e.mock.On("SetSSHClientCreator", clientCreator)}
}

func (_c *MockSSHConfiger_SetSSHClientCreator_Call) Run(run func(clientCreator sshutils.SSHClientCreator)) *MockSSHConfiger_SetSSHClientCreator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(sshutils.SSHClientCreator))
	})
	return _c
}

func (_c *MockSSHConfiger_SetSSHClientCreator_Call) Return() *MockSSHConfiger_SetSSHClientCreator_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSSHConfiger_SetSSHClientCreator_Call) RunAndReturn(run func(sshutils.SSHClientCreator)) *MockSSHConfiger_SetSSHClientCreator_Call {
	_c.Call.Return(run)
	return _c
}

// SetValidateSSHConnection provides a mock function with given fields: fn
func (_m *MockSSHConfiger) SetValidateSSHConnection(fn func() error) {
	_m.Called(fn)
}

// MockSSHConfiger_SetValidateSSHConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetValidateSSHConnection'
type MockSSHConfiger_SetValidateSSHConnection_Call struct {
	*mock.Call
}

// SetValidateSSHConnection is a helper method to define mock.On call
//   - fn func() error
func (_e *MockSSHConfiger_Expecter) SetValidateSSHConnection(fn interface{}) *MockSSHConfiger_SetValidateSSHConnection_Call {
	return &MockSSHConfiger_SetValidateSSHConnection_Call{Call: _e.mock.On("SetValidateSSHConnection", fn)}
}

func (_c *MockSSHConfiger_SetValidateSSHConnection_Call) Run(run func(fn func() error)) *MockSSHConfiger_SetValidateSSHConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func() error))
	})
	return _c
}

func (_c *MockSSHConfiger_SetValidateSSHConnection_Call) Return() *MockSSHConfiger_SetValidateSSHConnection_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSSHConfiger_SetValidateSSHConnection_Call) RunAndReturn(run func(func() error)) *MockSSHConfiger_SetValidateSSHConnection_Call {
	_c.Call.Return(run)
	return _c
}

// StartService provides a mock function with given fields: ctx, serviceName
func (_m *MockSSHConfiger) StartService(ctx context.Context, serviceName string) (string, error) {
	ret := _m.Called(ctx, serviceName)

	if len(ret) == 0 {
		panic("no return value specified for StartService")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, serviceName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, serviceName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, serviceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSSHConfiger_StartService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartService'
type MockSSHConfiger_StartService_Call struct {
	*mock.Call
}

// StartService is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceName string
func (_e *MockSSHConfiger_Expecter) StartService(ctx interface{}, serviceName interface{}) *MockSSHConfiger_StartService_Call {
	return &MockSSHConfiger_StartService_Call{Call: _e.mock.On("StartService", ctx, serviceName)}
}

func (_c *MockSSHConfiger_StartService_Call) Run(run func(ctx context.Context, serviceName string)) *MockSSHConfiger_StartService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSSHConfiger_StartService_Call) Return(_a0 string, _a1 error) *MockSSHConfiger_StartService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSSHConfiger_StartService_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockSSHConfiger_StartService_Call {
	_c.Call.Return(run)
	return _c
}

// WaitForSSH provides a mock function with given fields: ctx, retry, timeout
func (_m *MockSSHConfiger) WaitForSSH(ctx context.Context, retry int, timeout time.Duration) error {
	ret := _m.Called(ctx, retry, timeout)

	if len(ret) == 0 {
		panic("no return value specified for WaitForSSH")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, time.Duration) error); ok {
		r0 = rf(ctx, retry, timeout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSSHConfiger_WaitForSSH_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitForSSH'
type MockSSHConfiger_WaitForSSH_Call struct {
	*mock.Call
}

// WaitForSSH is a helper method to define mock.On call
//   - ctx context.Context
//   - retry int
//   - timeout time.Duration
func (_e *MockSSHConfiger_Expecter) WaitForSSH(ctx interface{}, retry interface{}, timeout interface{}) *MockSSHConfiger_WaitForSSH_Call {
	return &MockSSHConfiger_WaitForSSH_Call{Call: _e.mock.On("WaitForSSH", ctx, retry, timeout)}
}

func (_c *MockSSHConfiger_WaitForSSH_Call) Run(run func(ctx context.Context, retry int, timeout time.Duration)) *MockSSHConfiger_WaitForSSH_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockSSHConfiger_WaitForSSH_Call) Return(_a0 error) *MockSSHConfiger_WaitForSSH_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSSHConfiger_WaitForSSH_Call) RunAndReturn(run func(context.Context, int, time.Duration) error) *MockSSHConfiger_WaitForSSH_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSSHConfiger creates a new instance of MockSSHConfiger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSSHConfiger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSSHConfiger {
	mock := &MockSSHConfiger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
