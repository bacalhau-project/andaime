// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	sshutils "github.com/bacalhau-project/andaime/pkg/models/interfaces/sshutils"

	time "time"
)

// MockSSHOperations is an autogenerated mock type for the SSHOperations type
type MockSSHOperations struct {
	mock.Mock
}

type MockSSHOperations_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSSHOperations) EXPECT() *MockSSHOperations_Expecter {
	return &MockSSHOperations_Expecter{mock: &_m.Mock}
}

// Connect provides a mock function with given fields: ctx
func (_m *MockSSHOperations) Connect(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSSHOperations_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type MockSSHOperations_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSSHOperations_Expecter) Connect(ctx interface{}) *MockSSHOperations_Connect_Call {
	return &MockSSHOperations_Connect_Call{Call: _e.mock.On("Connect", ctx)}
}

func (_c *MockSSHOperations_Connect_Call) Run(run func(ctx context.Context)) *MockSSHOperations_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSSHOperations_Connect_Call) Return(_a0 error) *MockSSHOperations_Connect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSSHOperations_Connect_Call) RunAndReturn(run func(context.Context) error) *MockSSHOperations_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// CopyFile provides a mock function with given fields: ctx, source, destination, mode
func (_m *MockSSHOperations) CopyFile(ctx context.Context, source io.Reader, destination string, mode int) error {
	ret := _m.Called(ctx, source, destination, mode)

	if len(ret) == 0 {
		panic("no return value specified for CopyFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader, string, int) error); ok {
		r0 = rf(ctx, source, destination, mode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSSHOperations_CopyFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyFile'
type MockSSHOperations_CopyFile_Call struct {
	*mock.Call
}

// CopyFile is a helper method to define mock.On call
//   - ctx context.Context
//   - source io.Reader
//   - destination string
//   - mode int
func (_e *MockSSHOperations_Expecter) CopyFile(ctx interface{}, source interface{}, destination interface{}, mode interface{}) *MockSSHOperations_CopyFile_Call {
	return &MockSSHOperations_CopyFile_Call{Call: _e.mock.On("CopyFile", ctx, source, destination, mode)}
}

func (_c *MockSSHOperations_CopyFile_Call) Run(run func(ctx context.Context, source io.Reader, destination string, mode int)) *MockSSHOperations_CopyFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(io.Reader), args[2].(string), args[3].(int))
	})
	return _c
}

func (_c *MockSSHOperations_CopyFile_Call) Return(_a0 error) *MockSSHOperations_CopyFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSSHOperations_CopyFile_Call) RunAndReturn(run func(context.Context, io.Reader, string, int) error) *MockSSHOperations_CopyFile_Call {
	_c.Call.Return(run)
	return _c
}

// IsConnected provides a mock function with given fields: ctx
func (_m *MockSSHOperations) IsConnected(ctx context.Context) bool {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for IsConnected")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockSSHOperations_IsConnected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsConnected'
type MockSSHOperations_IsConnected_Call struct {
	*mock.Call
}

// IsConnected is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSSHOperations_Expecter) IsConnected(ctx interface{}) *MockSSHOperations_IsConnected_Call {
	return &MockSSHOperations_IsConnected_Call{Call: _e.mock.On("IsConnected", ctx)}
}

func (_c *MockSSHOperations_IsConnected_Call) Run(run func(ctx context.Context)) *MockSSHOperations_IsConnected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSSHOperations_IsConnected_Call) Return(_a0 bool) *MockSSHOperations_IsConnected_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSSHOperations_IsConnected_Call) RunAndReturn(run func(context.Context) bool) *MockSSHOperations_IsConnected_Call {
	_c.Call.Return(run)
	return _c
}

// NewSession provides a mock function with given fields: ctx
func (_m *MockSSHOperations) NewSession(ctx context.Context) (sshutils.SSHSessioner, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for NewSession")
	}

	var r0 sshutils.SSHSessioner
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (sshutils.SSHSessioner, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) sshutils.SSHSessioner); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sshutils.SSHSessioner)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSSHOperations_NewSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewSession'
type MockSSHOperations_NewSession_Call struct {
	*mock.Call
}

// NewSession is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSSHOperations_Expecter) NewSession(ctx interface{}) *MockSSHOperations_NewSession_Call {
	return &MockSSHOperations_NewSession_Call{Call: _e.mock.On("NewSession", ctx)}
}

func (_c *MockSSHOperations_NewSession_Call) Run(run func(ctx context.Context)) *MockSSHOperations_NewSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSSHOperations_NewSession_Call) Return(_a0 sshutils.SSHSessioner, _a1 error) *MockSSHOperations_NewSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSSHOperations_NewSession_Call) RunAndReturn(run func(context.Context) (sshutils.SSHSessioner, error)) *MockSSHOperations_NewSession_Call {
	_c.Call.Return(run)
	return _c
}

// RunCommand provides a mock function with given fields: ctx, command
func (_m *MockSSHOperations) RunCommand(ctx context.Context, command string) (string, error) {
	ret := _m.Called(ctx, command)

	if len(ret) == 0 {
		panic("no return value specified for RunCommand")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, command)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, command)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, command)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSSHOperations_RunCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunCommand'
type MockSSHOperations_RunCommand_Call struct {
	*mock.Call
}

// RunCommand is a helper method to define mock.On call
//   - ctx context.Context
//   - command string
func (_e *MockSSHOperations_Expecter) RunCommand(ctx interface{}, command interface{}) *MockSSHOperations_RunCommand_Call {
	return &MockSSHOperations_RunCommand_Call{Call: _e.mock.On("RunCommand", ctx, command)}
}

func (_c *MockSSHOperations_RunCommand_Call) Run(run func(ctx context.Context, command string)) *MockSSHOperations_RunCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSSHOperations_RunCommand_Call) Return(_a0 string, _a1 error) *MockSSHOperations_RunCommand_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSSHOperations_RunCommand_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockSSHOperations_RunCommand_Call {
	_c.Call.Return(run)
	return _c
}

// RunCommandWithTimeout provides a mock function with given fields: ctx, command, timeout
func (_m *MockSSHOperations) RunCommandWithTimeout(ctx context.Context, command string, timeout time.Duration) (string, error) {
	ret := _m.Called(ctx, command, timeout)

	if len(ret) == 0 {
		panic("no return value specified for RunCommandWithTimeout")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) (string, error)); ok {
		return rf(ctx, command, timeout)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) string); ok {
		r0 = rf(ctx, command, timeout)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Duration) error); ok {
		r1 = rf(ctx, command, timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSSHOperations_RunCommandWithTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunCommandWithTimeout'
type MockSSHOperations_RunCommandWithTimeout_Call struct {
	*mock.Call
}

// RunCommandWithTimeout is a helper method to define mock.On call
//   - ctx context.Context
//   - command string
//   - timeout time.Duration
func (_e *MockSSHOperations_Expecter) RunCommandWithTimeout(ctx interface{}, command interface{}, timeout interface{}) *MockSSHOperations_RunCommandWithTimeout_Call {
	return &MockSSHOperations_RunCommandWithTimeout_Call{Call: _e.mock.On("RunCommandWithTimeout", ctx, command, timeout)}
}

func (_c *MockSSHOperations_RunCommandWithTimeout_Call) Run(run func(ctx context.Context, command string, timeout time.Duration)) *MockSSHOperations_RunCommandWithTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockSSHOperations_RunCommandWithTimeout_Call) Return(_a0 string, _a1 error) *MockSSHOperations_RunCommandWithTimeout_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSSHOperations_RunCommandWithTimeout_Call) RunAndReturn(run func(context.Context, string, time.Duration) (string, error)) *MockSSHOperations_RunCommandWithTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSSHOperations creates a new instance of MockSSHOperations. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSSHOperations(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSSHOperations {
	mock := &MockSSHOperations{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
