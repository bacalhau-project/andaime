// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	awsprovider "github.com/bacalhau-project/andaime/pkg/providers/aws"

	mock "github.com/stretchr/testify/mock"

	types "github.com/aws/aws-sdk-go-v2/service/ec2/types"
)

// MockAWSProviderer is an autogenerated mock type for the AWSProviderer type
type MockAWSProviderer struct {
	mock.Mock
}

type MockAWSProviderer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAWSProviderer) EXPECT() *MockAWSProviderer_Expecter {
	return &MockAWSProviderer_Expecter{mock: &_m.Mock}
}

// GetEC2Client provides a mock function with given fields:
func (_m *MockAWSProviderer) GetEC2Client() (awsprovider.EC2Clienter, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEC2Client")
	}

	var r0 awsprovider.EC2Clienter
	var r1 error
	if rf, ok := ret.Get(0).(func() (awsprovider.EC2Clienter, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() awsprovider.EC2Clienter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(awsprovider.EC2Clienter)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAWSProviderer_GetEC2Client_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEC2Client'
type MockAWSProviderer_GetEC2Client_Call struct {
	*mock.Call
}

// GetEC2Client is a helper method to define mock.On call
func (_e *MockAWSProviderer_Expecter) GetEC2Client() *MockAWSProviderer_GetEC2Client_Call {
	return &MockAWSProviderer_GetEC2Client_Call{Call: _e.mock.On("GetEC2Client")}
}

func (_c *MockAWSProviderer_GetEC2Client_Call) Run(run func()) *MockAWSProviderer_GetEC2Client_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAWSProviderer_GetEC2Client_Call) Return(_a0 awsprovider.EC2Clienter, _a1 error) *MockAWSProviderer_GetEC2Client_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAWSProviderer_GetEC2Client_Call) RunAndReturn(run func() (awsprovider.EC2Clienter, error)) *MockAWSProviderer_GetEC2Client_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestUbuntuImage provides a mock function with given fields: _a0, _a1
func (_m *MockAWSProviderer) GetLatestUbuntuImage(_a0 context.Context, _a1 string) (*types.Image, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestUbuntuImage")
	}

	var r0 *types.Image
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.Image, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Image); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAWSProviderer_GetLatestUbuntuImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestUbuntuImage'
type MockAWSProviderer_GetLatestUbuntuImage_Call struct {
	*mock.Call
}

// GetLatestUbuntuImage is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *MockAWSProviderer_Expecter) GetLatestUbuntuImage(_a0 interface{}, _a1 interface{}) *MockAWSProviderer_GetLatestUbuntuImage_Call {
	return &MockAWSProviderer_GetLatestUbuntuImage_Call{Call: _e.mock.On("GetLatestUbuntuImage", _a0, _a1)}
}

func (_c *MockAWSProviderer_GetLatestUbuntuImage_Call) Run(run func(_a0 context.Context, _a1 string)) *MockAWSProviderer_GetLatestUbuntuImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAWSProviderer_GetLatestUbuntuImage_Call) Return(_a0 *types.Image, _a1 error) *MockAWSProviderer_GetLatestUbuntuImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAWSProviderer_GetLatestUbuntuImage_Call) RunAndReturn(run func(context.Context, string) (*types.Image, error)) *MockAWSProviderer_GetLatestUbuntuImage_Call {
	_c.Call.Return(run)
	return _c
}

// SetEC2Client provides a mock function with given fields: _a0
func (_m *MockAWSProviderer) SetEC2Client(_a0 awsprovider.EC2Clienter) {
	_m.Called(_a0)
}

// MockAWSProviderer_SetEC2Client_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEC2Client'
type MockAWSProviderer_SetEC2Client_Call struct {
	*mock.Call
}

// SetEC2Client is a helper method to define mock.On call
//   - _a0 awsprovider.EC2Clienter
func (_e *MockAWSProviderer_Expecter) SetEC2Client(_a0 interface{}) *MockAWSProviderer_SetEC2Client_Call {
	return &MockAWSProviderer_SetEC2Client_Call{Call: _e.mock.On("SetEC2Client", _a0)}
}

func (_c *MockAWSProviderer_SetEC2Client_Call) Run(run func(_a0 awsprovider.EC2Clienter)) *MockAWSProviderer_SetEC2Client_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(awsprovider.EC2Clienter))
	})
	return _c
}

func (_c *MockAWSProviderer_SetEC2Client_Call) Return() *MockAWSProviderer_SetEC2Client_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAWSProviderer_SetEC2Client_Call) RunAndReturn(run func(awsprovider.EC2Clienter)) *MockAWSProviderer_SetEC2Client_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAWSProviderer creates a new instance of MockAWSProviderer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAWSProviderer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAWSProviderer {
	mock := &MockAWSProviderer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
