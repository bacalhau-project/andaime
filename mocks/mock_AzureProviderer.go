// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	armcompute "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute"
	armresources "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armresources"

	common "github.com/bacalhau-project/andaime/pkg/providers/common"

	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/bacalhau-project/andaime/pkg/models"
)

// MockAzureProviderer is an autogenerated mock type for the AzureProviderer type
type MockAzureProviderer struct {
	mock.Mock
}

type MockAzureProviderer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAzureProviderer) EXPECT() *MockAzureProviderer_Expecter {
	return &MockAzureProviderer_Expecter{mock: &_m.Mock}
}

// AllMachinesComplete provides a mock function with given fields:
func (_m *MockAzureProviderer) AllMachinesComplete() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AllMachinesComplete")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockAzureProviderer_AllMachinesComplete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllMachinesComplete'
type MockAzureProviderer_AllMachinesComplete_Call struct {
	*mock.Call
}

// AllMachinesComplete is a helper method to define mock.On call
func (_e *MockAzureProviderer_Expecter) AllMachinesComplete() *MockAzureProviderer_AllMachinesComplete_Call {
	return &MockAzureProviderer_AllMachinesComplete_Call{Call: _e.mock.On("AllMachinesComplete")}
}

func (_c *MockAzureProviderer_AllMachinesComplete_Call) Run(run func()) *MockAzureProviderer_AllMachinesComplete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAzureProviderer_AllMachinesComplete_Call) Return(_a0 bool) *MockAzureProviderer_AllMachinesComplete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAzureProviderer_AllMachinesComplete_Call) RunAndReturn(run func() bool) *MockAzureProviderer_AllMachinesComplete_Call {
	_c.Call.Return(run)
	return _c
}

// CancelAllDeployments provides a mock function with given fields: ctx
func (_m *MockAzureProviderer) CancelAllDeployments(ctx context.Context) {
	_m.Called(ctx)
}

// MockAzureProviderer_CancelAllDeployments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelAllDeployments'
type MockAzureProviderer_CancelAllDeployments_Call struct {
	*mock.Call
}

// CancelAllDeployments is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAzureProviderer_Expecter) CancelAllDeployments(ctx interface{}) *MockAzureProviderer_CancelAllDeployments_Call {
	return &MockAzureProviderer_CancelAllDeployments_Call{Call: _e.mock.On("CancelAllDeployments", ctx)}
}

func (_c *MockAzureProviderer_CancelAllDeployments_Call) Run(run func(ctx context.Context)) *MockAzureProviderer_CancelAllDeployments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAzureProviderer_CancelAllDeployments_Call) Return() *MockAzureProviderer_CancelAllDeployments_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAzureProviderer_CancelAllDeployments_Call) RunAndReturn(run func(context.Context)) *MockAzureProviderer_CancelAllDeployments_Call {
	_c.Call.Return(run)
	return _c
}

// CreateResources provides a mock function with given fields: ctx
func (_m *MockAzureProviderer) CreateResources(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateResources")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAzureProviderer_CreateResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateResources'
type MockAzureProviderer_CreateResources_Call struct {
	*mock.Call
}

// CreateResources is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAzureProviderer_Expecter) CreateResources(ctx interface{}) *MockAzureProviderer_CreateResources_Call {
	return &MockAzureProviderer_CreateResources_Call{Call: _e.mock.On("CreateResources", ctx)}
}

func (_c *MockAzureProviderer_CreateResources_Call) Run(run func(ctx context.Context)) *MockAzureProviderer_CreateResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAzureProviderer_CreateResources_Call) Return(_a0 error) *MockAzureProviderer_CreateResources_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAzureProviderer_CreateResources_Call) RunAndReturn(run func(context.Context) error) *MockAzureProviderer_CreateResources_Call {
	_c.Call.Return(run)
	return _c
}

// DestroyResourceGroup provides a mock function with given fields: ctx, resourceGroupName
func (_m *MockAzureProviderer) DestroyResourceGroup(ctx context.Context, resourceGroupName string) error {
	ret := _m.Called(ctx, resourceGroupName)

	if len(ret) == 0 {
		panic("no return value specified for DestroyResourceGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, resourceGroupName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAzureProviderer_DestroyResourceGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DestroyResourceGroup'
type MockAzureProviderer_DestroyResourceGroup_Call struct {
	*mock.Call
}

// DestroyResourceGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - resourceGroupName string
func (_e *MockAzureProviderer_Expecter) DestroyResourceGroup(ctx interface{}, resourceGroupName interface{}) *MockAzureProviderer_DestroyResourceGroup_Call {
	return &MockAzureProviderer_DestroyResourceGroup_Call{Call: _e.mock.On("DestroyResourceGroup", ctx, resourceGroupName)}
}

func (_c *MockAzureProviderer_DestroyResourceGroup_Call) Run(run func(ctx context.Context, resourceGroupName string)) *MockAzureProviderer_DestroyResourceGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAzureProviderer_DestroyResourceGroup_Call) Return(_a0 error) *MockAzureProviderer_DestroyResourceGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAzureProviderer_DestroyResourceGroup_Call) RunAndReturn(run func(context.Context, string) error) *MockAzureProviderer_DestroyResourceGroup_Call {
	_c.Call.Return(run)
	return _c
}

// DestroyResources provides a mock function with given fields: ctx, resourceGroupName
func (_m *MockAzureProviderer) DestroyResources(ctx context.Context, resourceGroupName string) error {
	ret := _m.Called(ctx, resourceGroupName)

	if len(ret) == 0 {
		panic("no return value specified for DestroyResources")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, resourceGroupName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAzureProviderer_DestroyResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DestroyResources'
type MockAzureProviderer_DestroyResources_Call struct {
	*mock.Call
}

// DestroyResources is a helper method to define mock.On call
//   - ctx context.Context
//   - resourceGroupName string
func (_e *MockAzureProviderer_Expecter) DestroyResources(ctx interface{}, resourceGroupName interface{}) *MockAzureProviderer_DestroyResources_Call {
	return &MockAzureProviderer_DestroyResources_Call{Call: _e.mock.On("DestroyResources", ctx, resourceGroupName)}
}

func (_c *MockAzureProviderer_DestroyResources_Call) Run(run func(ctx context.Context, resourceGroupName string)) *MockAzureProviderer_DestroyResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAzureProviderer_DestroyResources_Call) Return(_a0 error) *MockAzureProviderer_DestroyResources_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAzureProviderer_DestroyResources_Call) RunAndReturn(run func(context.Context, string) error) *MockAzureProviderer_DestroyResources_Call {
	_c.Call.Return(run)
	return _c
}

// FinalizeDeployment provides a mock function with given fields: ctx
func (_m *MockAzureProviderer) FinalizeDeployment(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FinalizeDeployment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAzureProviderer_FinalizeDeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinalizeDeployment'
type MockAzureProviderer_FinalizeDeployment_Call struct {
	*mock.Call
}

// FinalizeDeployment is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAzureProviderer_Expecter) FinalizeDeployment(ctx interface{}) *MockAzureProviderer_FinalizeDeployment_Call {
	return &MockAzureProviderer_FinalizeDeployment_Call{Call: _e.mock.On("FinalizeDeployment", ctx)}
}

func (_c *MockAzureProviderer_FinalizeDeployment_Call) Run(run func(ctx context.Context)) *MockAzureProviderer_FinalizeDeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAzureProviderer_FinalizeDeployment_Call) Return(_a0 error) *MockAzureProviderer_FinalizeDeployment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAzureProviderer_FinalizeDeployment_Call) RunAndReturn(run func(context.Context) error) *MockAzureProviderer_FinalizeDeployment_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterDeployer provides a mock function with given fields:
func (_m *MockAzureProviderer) GetClusterDeployer() common.ClusterDeployerer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetClusterDeployer")
	}

	var r0 common.ClusterDeployerer
	if rf, ok := ret.Get(0).(func() common.ClusterDeployerer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.ClusterDeployerer)
		}
	}

	return r0
}

// MockAzureProviderer_GetClusterDeployer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterDeployer'
type MockAzureProviderer_GetClusterDeployer_Call struct {
	*mock.Call
}

// GetClusterDeployer is a helper method to define mock.On call
func (_e *MockAzureProviderer_Expecter) GetClusterDeployer() *MockAzureProviderer_GetClusterDeployer_Call {
	return &MockAzureProviderer_GetClusterDeployer_Call{Call: _e.mock.On("GetClusterDeployer")}
}

func (_c *MockAzureProviderer_GetClusterDeployer_Call) Run(run func()) *MockAzureProviderer_GetClusterDeployer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAzureProviderer_GetClusterDeployer_Call) Return(_a0 common.ClusterDeployerer) *MockAzureProviderer_GetClusterDeployer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAzureProviderer_GetClusterDeployer_Call) RunAndReturn(run func() common.ClusterDeployerer) *MockAzureProviderer_GetClusterDeployer_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrCreateResourceGroup provides a mock function with given fields: ctx, rgName, locationData, tags
func (_m *MockAzureProviderer) GetOrCreateResourceGroup(ctx context.Context, rgName string, locationData string, tags map[string]string) (*armresources.ResourceGroup, error) {
	ret := _m.Called(ctx, rgName, locationData, tags)

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreateResourceGroup")
	}

	var r0 *armresources.ResourceGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]string) (*armresources.ResourceGroup, error)); ok {
		return rf(ctx, rgName, locationData, tags)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]string) *armresources.ResourceGroup); ok {
		r0 = rf(ctx, rgName, locationData, tags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*armresources.ResourceGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, map[string]string) error); ok {
		r1 = rf(ctx, rgName, locationData, tags)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAzureProviderer_GetOrCreateResourceGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrCreateResourceGroup'
type MockAzureProviderer_GetOrCreateResourceGroup_Call struct {
	*mock.Call
}

// GetOrCreateResourceGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - rgName string
//   - locationData string
//   - tags map[string]string
func (_e *MockAzureProviderer_Expecter) GetOrCreateResourceGroup(ctx interface{}, rgName interface{}, locationData interface{}, tags interface{}) *MockAzureProviderer_GetOrCreateResourceGroup_Call {
	return &MockAzureProviderer_GetOrCreateResourceGroup_Call{Call: _e.mock.On("GetOrCreateResourceGroup", ctx, rgName, locationData, tags)}
}

func (_c *MockAzureProviderer_GetOrCreateResourceGroup_Call) Run(run func(ctx context.Context, rgName string, locationData string, tags map[string]string)) *MockAzureProviderer_GetOrCreateResourceGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(map[string]string))
	})
	return _c
}

func (_c *MockAzureProviderer_GetOrCreateResourceGroup_Call) Return(_a0 *armresources.ResourceGroup, _a1 error) *MockAzureProviderer_GetOrCreateResourceGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAzureProviderer_GetOrCreateResourceGroup_Call) RunAndReturn(run func(context.Context, string, string, map[string]string) (*armresources.ResourceGroup, error)) *MockAzureProviderer_GetOrCreateResourceGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GetResources provides a mock function with given fields: ctx, resourceGroup, tags
func (_m *MockAzureProviderer) GetResources(ctx context.Context, resourceGroup string, tags map[string]*string) ([]interface{}, error) {
	ret := _m.Called(ctx, resourceGroup, tags)

	if len(ret) == 0 {
		panic("no return value specified for GetResources")
	}

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]*string) ([]interface{}, error)); ok {
		return rf(ctx, resourceGroup, tags)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]*string) []interface{}); ok {
		r0 = rf(ctx, resourceGroup, tags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]*string) error); ok {
		r1 = rf(ctx, resourceGroup, tags)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAzureProviderer_GetResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResources'
type MockAzureProviderer_GetResources_Call struct {
	*mock.Call
}

// GetResources is a helper method to define mock.On call
//   - ctx context.Context
//   - resourceGroup string
//   - tags map[string]*string
func (_e *MockAzureProviderer_Expecter) GetResources(ctx interface{}, resourceGroup interface{}, tags interface{}) *MockAzureProviderer_GetResources_Call {
	return &MockAzureProviderer_GetResources_Call{Call: _e.mock.On("GetResources", ctx, resourceGroup, tags)}
}

func (_c *MockAzureProviderer_GetResources_Call) Run(run func(ctx context.Context, resourceGroup string, tags map[string]*string)) *MockAzureProviderer_GetResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]*string))
	})
	return _c
}

func (_c *MockAzureProviderer_GetResources_Call) Return(_a0 []interface{}, _a1 error) *MockAzureProviderer_GetResources_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAzureProviderer_GetResources_Call) RunAndReturn(run func(context.Context, string, map[string]*string) ([]interface{}, error)) *MockAzureProviderer_GetResources_Call {
	_c.Call.Return(run)
	return _c
}

// GetSKUsByLocation provides a mock function with given fields: ctx, location
func (_m *MockAzureProviderer) GetSKUsByLocation(ctx context.Context, location string) ([]armcompute.ResourceSKU, error) {
	ret := _m.Called(ctx, location)

	if len(ret) == 0 {
		panic("no return value specified for GetSKUsByLocation")
	}

	var r0 []armcompute.ResourceSKU
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]armcompute.ResourceSKU, error)); ok {
		return rf(ctx, location)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []armcompute.ResourceSKU); ok {
		r0 = rf(ctx, location)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]armcompute.ResourceSKU)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, location)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAzureProviderer_GetSKUsByLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSKUsByLocation'
type MockAzureProviderer_GetSKUsByLocation_Call struct {
	*mock.Call
}

// GetSKUsByLocation is a helper method to define mock.On call
//   - ctx context.Context
//   - location string
func (_e *MockAzureProviderer_Expecter) GetSKUsByLocation(ctx interface{}, location interface{}) *MockAzureProviderer_GetSKUsByLocation_Call {
	return &MockAzureProviderer_GetSKUsByLocation_Call{Call: _e.mock.On("GetSKUsByLocation", ctx, location)}
}

func (_c *MockAzureProviderer_GetSKUsByLocation_Call) Run(run func(ctx context.Context, location string)) *MockAzureProviderer_GetSKUsByLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAzureProviderer_GetSKUsByLocation_Call) Return(_a0 []armcompute.ResourceSKU, _a1 error) *MockAzureProviderer_GetSKUsByLocation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAzureProviderer_GetSKUsByLocation_Call) RunAndReturn(run func(context.Context, string) ([]armcompute.ResourceSKU, error)) *MockAzureProviderer_GetSKUsByLocation_Call {
	_c.Call.Return(run)
	return _c
}

// GetVMExternalIP provides a mock function with given fields: ctx, vmName, locationData
func (_m *MockAzureProviderer) GetVMExternalIP(ctx context.Context, vmName string, locationData map[string]string) (string, error) {
	ret := _m.Called(ctx, vmName, locationData)

	if len(ret) == 0 {
		panic("no return value specified for GetVMExternalIP")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) (string, error)); ok {
		return rf(ctx, vmName, locationData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) string); ok {
		r0 = rf(ctx, vmName, locationData)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]string) error); ok {
		r1 = rf(ctx, vmName, locationData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAzureProviderer_GetVMExternalIP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVMExternalIP'
type MockAzureProviderer_GetVMExternalIP_Call struct {
	*mock.Call
}

// GetVMExternalIP is a helper method to define mock.On call
//   - ctx context.Context
//   - vmName string
//   - locationData map[string]string
func (_e *MockAzureProviderer_Expecter) GetVMExternalIP(ctx interface{}, vmName interface{}, locationData interface{}) *MockAzureProviderer_GetVMExternalIP_Call {
	return &MockAzureProviderer_GetVMExternalIP_Call{Call: _e.mock.On("GetVMExternalIP", ctx, vmName, locationData)}
}

func (_c *MockAzureProviderer_GetVMExternalIP_Call) Run(run func(ctx context.Context, vmName string, locationData map[string]string)) *MockAzureProviderer_GetVMExternalIP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]string))
	})
	return _c
}

func (_c *MockAzureProviderer_GetVMExternalIP_Call) Return(_a0 string, _a1 error) *MockAzureProviderer_GetVMExternalIP_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAzureProviderer_GetVMExternalIP_Call) RunAndReturn(run func(context.Context, string, map[string]string) (string, error)) *MockAzureProviderer_GetVMExternalIP_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllResourceGroups provides a mock function with given fields: ctx
func (_m *MockAzureProviderer) ListAllResourceGroups(ctx context.Context) ([]*armresources.ResourceGroup, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListAllResourceGroups")
	}

	var r0 []*armresources.ResourceGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*armresources.ResourceGroup, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*armresources.ResourceGroup); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*armresources.ResourceGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAzureProviderer_ListAllResourceGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllResourceGroups'
type MockAzureProviderer_ListAllResourceGroups_Call struct {
	*mock.Call
}

// ListAllResourceGroups is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAzureProviderer_Expecter) ListAllResourceGroups(ctx interface{}) *MockAzureProviderer_ListAllResourceGroups_Call {
	return &MockAzureProviderer_ListAllResourceGroups_Call{Call: _e.mock.On("ListAllResourceGroups", ctx)}
}

func (_c *MockAzureProviderer_ListAllResourceGroups_Call) Run(run func(ctx context.Context)) *MockAzureProviderer_ListAllResourceGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAzureProviderer_ListAllResourceGroups_Call) Return(_a0 []*armresources.ResourceGroup, _a1 error) *MockAzureProviderer_ListAllResourceGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAzureProviderer_ListAllResourceGroups_Call) RunAndReturn(run func(context.Context) ([]*armresources.ResourceGroup, error)) *MockAzureProviderer_ListAllResourceGroups_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllResourcesInSubscription provides a mock function with given fields: ctx, tags
func (_m *MockAzureProviderer) ListAllResourcesInSubscription(ctx context.Context, tags map[string]*string) ([]interface{}, error) {
	ret := _m.Called(ctx, tags)

	if len(ret) == 0 {
		panic("no return value specified for ListAllResourcesInSubscription")
	}

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]*string) ([]interface{}, error)); ok {
		return rf(ctx, tags)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]*string) []interface{}); ok {
		r0 = rf(ctx, tags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string]*string) error); ok {
		r1 = rf(ctx, tags)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAzureProviderer_ListAllResourcesInSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllResourcesInSubscription'
type MockAzureProviderer_ListAllResourcesInSubscription_Call struct {
	*mock.Call
}

// ListAllResourcesInSubscription is a helper method to define mock.On call
//   - ctx context.Context
//   - tags map[string]*string
func (_e *MockAzureProviderer_Expecter) ListAllResourcesInSubscription(ctx interface{}, tags interface{}) *MockAzureProviderer_ListAllResourcesInSubscription_Call {
	return &MockAzureProviderer_ListAllResourcesInSubscription_Call{Call: _e.mock.On("ListAllResourcesInSubscription", ctx, tags)}
}

func (_c *MockAzureProviderer_ListAllResourcesInSubscription_Call) Run(run func(ctx context.Context, tags map[string]*string)) *MockAzureProviderer_ListAllResourcesInSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[string]*string))
	})
	return _c
}

func (_c *MockAzureProviderer_ListAllResourcesInSubscription_Call) Return(_a0 []interface{}, _a1 error) *MockAzureProviderer_ListAllResourcesInSubscription_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAzureProviderer_ListAllResourcesInSubscription_Call) RunAndReturn(run func(context.Context, map[string]*string) ([]interface{}, error)) *MockAzureProviderer_ListAllResourcesInSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// PollResources provides a mock function with given fields: ctx
func (_m *MockAzureProviderer) PollResources(ctx context.Context) ([]interface{}, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for PollResources")
	}

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]interface{}, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []interface{}); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAzureProviderer_PollResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PollResources'
type MockAzureProviderer_PollResources_Call struct {
	*mock.Call
}

// PollResources is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAzureProviderer_Expecter) PollResources(ctx interface{}) *MockAzureProviderer_PollResources_Call {
	return &MockAzureProviderer_PollResources_Call{Call: _e.mock.On("PollResources", ctx)}
}

func (_c *MockAzureProviderer_PollResources_Call) Run(run func(ctx context.Context)) *MockAzureProviderer_PollResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAzureProviderer_PollResources_Call) Return(_a0 []interface{}, _a1 error) *MockAzureProviderer_PollResources_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAzureProviderer_PollResources_Call) RunAndReturn(run func(context.Context) ([]interface{}, error)) *MockAzureProviderer_PollResources_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareDeployment provides a mock function with given fields: ctx
func (_m *MockAzureProviderer) PrepareDeployment(ctx context.Context) (*models.Deployment, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for PrepareDeployment")
	}

	var r0 *models.Deployment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*models.Deployment, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *models.Deployment); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Deployment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAzureProviderer_PrepareDeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareDeployment'
type MockAzureProviderer_PrepareDeployment_Call struct {
	*mock.Call
}

// PrepareDeployment is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAzureProviderer_Expecter) PrepareDeployment(ctx interface{}) *MockAzureProviderer_PrepareDeployment_Call {
	return &MockAzureProviderer_PrepareDeployment_Call{Call: _e.mock.On("PrepareDeployment", ctx)}
}

func (_c *MockAzureProviderer_PrepareDeployment_Call) Run(run func(ctx context.Context)) *MockAzureProviderer_PrepareDeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAzureProviderer_PrepareDeployment_Call) Return(_a0 *models.Deployment, _a1 error) *MockAzureProviderer_PrepareDeployment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAzureProviderer_PrepareDeployment_Call) RunAndReturn(run func(context.Context) (*models.Deployment, error)) *MockAzureProviderer_PrepareDeployment_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareResourceGroup provides a mock function with given fields: ctx
func (_m *MockAzureProviderer) PrepareResourceGroup(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for PrepareResourceGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAzureProviderer_PrepareResourceGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareResourceGroup'
type MockAzureProviderer_PrepareResourceGroup_Call struct {
	*mock.Call
}

// PrepareResourceGroup is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAzureProviderer_Expecter) PrepareResourceGroup(ctx interface{}) *MockAzureProviderer_PrepareResourceGroup_Call {
	return &MockAzureProviderer_PrepareResourceGroup_Call{Call: _e.mock.On("PrepareResourceGroup", ctx)}
}

func (_c *MockAzureProviderer_PrepareResourceGroup_Call) Run(run func(ctx context.Context)) *MockAzureProviderer_PrepareResourceGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAzureProviderer_PrepareResourceGroup_Call) Return(_a0 error) *MockAzureProviderer_PrepareResourceGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAzureProviderer_PrepareResourceGroup_Call) RunAndReturn(run func(context.Context) error) *MockAzureProviderer_PrepareResourceGroup_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessMachinesConfig provides a mock function with given fields: ctx
func (_m *MockAzureProviderer) ProcessMachinesConfig(ctx context.Context) (map[string]models.Machiner, map[string]bool, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ProcessMachinesConfig")
	}

	var r0 map[string]models.Machiner
	var r1 map[string]bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]models.Machiner, map[string]bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]models.Machiner); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]models.Machiner)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) map[string]bool); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]bool)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAzureProviderer_ProcessMachinesConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessMachinesConfig'
type MockAzureProviderer_ProcessMachinesConfig_Call struct {
	*mock.Call
}

// ProcessMachinesConfig is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAzureProviderer_Expecter) ProcessMachinesConfig(ctx interface{}) *MockAzureProviderer_ProcessMachinesConfig_Call {
	return &MockAzureProviderer_ProcessMachinesConfig_Call{Call: _e.mock.On("ProcessMachinesConfig", ctx)}
}

func (_c *MockAzureProviderer_ProcessMachinesConfig_Call) Run(run func(ctx context.Context)) *MockAzureProviderer_ProcessMachinesConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAzureProviderer_ProcessMachinesConfig_Call) Return(_a0 map[string]models.Machiner, _a1 map[string]bool, _a2 error) *MockAzureProviderer_ProcessMachinesConfig_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAzureProviderer_ProcessMachinesConfig_Call) RunAndReturn(run func(context.Context) (map[string]models.Machiner, map[string]bool, error)) *MockAzureProviderer_ProcessMachinesConfig_Call {
	_c.Call.Return(run)
	return _c
}

// SetClusterDeployer provides a mock function with given fields: deployer
func (_m *MockAzureProviderer) SetClusterDeployer(deployer common.ClusterDeployerer) {
	_m.Called(deployer)
}

// MockAzureProviderer_SetClusterDeployer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetClusterDeployer'
type MockAzureProviderer_SetClusterDeployer_Call struct {
	*mock.Call
}

// SetClusterDeployer is a helper method to define mock.On call
//   - deployer common.ClusterDeployerer
func (_e *MockAzureProviderer_Expecter) SetClusterDeployer(deployer interface{}) *MockAzureProviderer_SetClusterDeployer_Call {
	return &MockAzureProviderer_SetClusterDeployer_Call{Call: _e.mock.On("SetClusterDeployer", deployer)}
}

func (_c *MockAzureProviderer_SetClusterDeployer_Call) Run(run func(deployer common.ClusterDeployerer)) *MockAzureProviderer_SetClusterDeployer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.ClusterDeployerer))
	})
	return _c
}

func (_c *MockAzureProviderer_SetClusterDeployer_Call) Return() *MockAzureProviderer_SetClusterDeployer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAzureProviderer_SetClusterDeployer_Call) RunAndReturn(run func(common.ClusterDeployerer)) *MockAzureProviderer_SetClusterDeployer_Call {
	_c.Call.Return(run)
	return _c
}

// StartResourcePolling provides a mock function with given fields: ctx
func (_m *MockAzureProviderer) StartResourcePolling(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for StartResourcePolling")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAzureProviderer_StartResourcePolling_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartResourcePolling'
type MockAzureProviderer_StartResourcePolling_Call struct {
	*mock.Call
}

// StartResourcePolling is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAzureProviderer_Expecter) StartResourcePolling(ctx interface{}) *MockAzureProviderer_StartResourcePolling_Call {
	return &MockAzureProviderer_StartResourcePolling_Call{Call: _e.mock.On("StartResourcePolling", ctx)}
}

func (_c *MockAzureProviderer_StartResourcePolling_Call) Run(run func(ctx context.Context)) *MockAzureProviderer_StartResourcePolling_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAzureProviderer_StartResourcePolling_Call) Return(_a0 error) *MockAzureProviderer_StartResourcePolling_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAzureProviderer_StartResourcePolling_Call) RunAndReturn(run func(context.Context) error) *MockAzureProviderer_StartResourcePolling_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateMachineType provides a mock function with given fields: ctx, location, machineType
func (_m *MockAzureProviderer) ValidateMachineType(ctx context.Context, location string, machineType string) (bool, error) {
	ret := _m.Called(ctx, location, machineType)

	if len(ret) == 0 {
		panic("no return value specified for ValidateMachineType")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, location, machineType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, location, machineType)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, location, machineType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAzureProviderer_ValidateMachineType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateMachineType'
type MockAzureProviderer_ValidateMachineType_Call struct {
	*mock.Call
}

// ValidateMachineType is a helper method to define mock.On call
//   - ctx context.Context
//   - location string
//   - machineType string
func (_e *MockAzureProviderer_Expecter) ValidateMachineType(ctx interface{}, location interface{}, machineType interface{}) *MockAzureProviderer_ValidateMachineType_Call {
	return &MockAzureProviderer_ValidateMachineType_Call{Call: _e.mock.On("ValidateMachineType", ctx, location, machineType)}
}

func (_c *MockAzureProviderer_ValidateMachineType_Call) Run(run func(ctx context.Context, location string, machineType string)) *MockAzureProviderer_ValidateMachineType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockAzureProviderer_ValidateMachineType_Call) Return(_a0 bool, _a1 error) *MockAzureProviderer_ValidateMachineType_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAzureProviderer_ValidateMachineType_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *MockAzureProviderer_ValidateMachineType_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAzureProviderer creates a new instance of MockAzureProviderer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAzureProviderer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAzureProviderer {
	mock := &MockAzureProviderer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
