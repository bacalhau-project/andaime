// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/bacalhau-project/andaime/pkg/providers/common"

	mock "github.com/stretchr/testify/mock"

	models "github.com/bacalhau-project/andaime/pkg/models"
)

// MockProviderer is an autogenerated mock type for the Providerer type
type MockProviderer struct {
	mock.Mock
}

type MockProviderer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProviderer) EXPECT() *MockProviderer_Expecter {
	return &MockProviderer_Expecter{mock: &_m.Mock}
}

// CreateResources provides a mock function with given fields: ctx
func (_m *MockProviderer) CreateResources(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateResources")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProviderer_CreateResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateResources'
type MockProviderer_CreateResources_Call struct {
	*mock.Call
}

// CreateResources is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProviderer_Expecter) CreateResources(ctx interface{}) *MockProviderer_CreateResources_Call {
	return &MockProviderer_CreateResources_Call{Call: _e.mock.On("CreateResources", ctx)}
}

func (_c *MockProviderer_CreateResources_Call) Run(run func(ctx context.Context)) *MockProviderer_CreateResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockProviderer_CreateResources_Call) Return(_a0 error) *MockProviderer_CreateResources_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProviderer_CreateResources_Call) RunAndReturn(run func(context.Context) error) *MockProviderer_CreateResources_Call {
	_c.Call.Return(run)
	return _c
}

// DestroyResources provides a mock function with given fields: ctx, deploymentID
func (_m *MockProviderer) DestroyResources(ctx context.Context, deploymentID string) error {
	ret := _m.Called(ctx, deploymentID)

	if len(ret) == 0 {
		panic("no return value specified for DestroyResources")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, deploymentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProviderer_DestroyResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DestroyResources'
type MockProviderer_DestroyResources_Call struct {
	*mock.Call
}

// DestroyResources is a helper method to define mock.On call
//   - ctx context.Context
//   - deploymentID string
func (_e *MockProviderer_Expecter) DestroyResources(ctx interface{}, deploymentID interface{}) *MockProviderer_DestroyResources_Call {
	return &MockProviderer_DestroyResources_Call{Call: _e.mock.On("DestroyResources", ctx, deploymentID)}
}

func (_c *MockProviderer_DestroyResources_Call) Run(run func(ctx context.Context, deploymentID string)) *MockProviderer_DestroyResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProviderer_DestroyResources_Call) Return(_a0 error) *MockProviderer_DestroyResources_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProviderer_DestroyResources_Call) RunAndReturn(run func(context.Context, string) error) *MockProviderer_DestroyResources_Call {
	_c.Call.Return(run)
	return _c
}

// FinalizeDeployment provides a mock function with given fields: ctx
func (_m *MockProviderer) FinalizeDeployment(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FinalizeDeployment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProviderer_FinalizeDeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinalizeDeployment'
type MockProviderer_FinalizeDeployment_Call struct {
	*mock.Call
}

// FinalizeDeployment is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProviderer_Expecter) FinalizeDeployment(ctx interface{}) *MockProviderer_FinalizeDeployment_Call {
	return &MockProviderer_FinalizeDeployment_Call{Call: _e.mock.On("FinalizeDeployment", ctx)}
}

func (_c *MockProviderer_FinalizeDeployment_Call) Run(run func(ctx context.Context)) *MockProviderer_FinalizeDeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockProviderer_FinalizeDeployment_Call) Return(_a0 error) *MockProviderer_FinalizeDeployment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProviderer_FinalizeDeployment_Call) RunAndReturn(run func(context.Context) error) *MockProviderer_FinalizeDeployment_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterDeployer provides a mock function with given fields:
func (_m *MockProviderer) GetClusterDeployer() common.ClusterDeployerer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetClusterDeployer")
	}

	var r0 common.ClusterDeployerer
	if rf, ok := ret.Get(0).(func() common.ClusterDeployerer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.ClusterDeployerer)
		}
	}

	return r0
}

// MockProviderer_GetClusterDeployer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterDeployer'
type MockProviderer_GetClusterDeployer_Call struct {
	*mock.Call
}

// GetClusterDeployer is a helper method to define mock.On call
func (_e *MockProviderer_Expecter) GetClusterDeployer() *MockProviderer_GetClusterDeployer_Call {
	return &MockProviderer_GetClusterDeployer_Call{Call: _e.mock.On("GetClusterDeployer")}
}

func (_c *MockProviderer_GetClusterDeployer_Call) Run(run func()) *MockProviderer_GetClusterDeployer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProviderer_GetClusterDeployer_Call) Return(_a0 common.ClusterDeployerer) *MockProviderer_GetClusterDeployer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProviderer_GetClusterDeployer_Call) RunAndReturn(run func() common.ClusterDeployerer) *MockProviderer_GetClusterDeployer_Call {
	_c.Call.Return(run)
	return _c
}

// GetVMExternalIP provides a mock function with given fields: ctx, vmName, locationData
func (_m *MockProviderer) GetVMExternalIP(ctx context.Context, vmName string, locationData map[string]string) (string, error) {
	ret := _m.Called(ctx, vmName, locationData)

	if len(ret) == 0 {
		panic("no return value specified for GetVMExternalIP")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) (string, error)); ok {
		return rf(ctx, vmName, locationData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) string); ok {
		r0 = rf(ctx, vmName, locationData)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]string) error); ok {
		r1 = rf(ctx, vmName, locationData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderer_GetVMExternalIP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVMExternalIP'
type MockProviderer_GetVMExternalIP_Call struct {
	*mock.Call
}

// GetVMExternalIP is a helper method to define mock.On call
//   - ctx context.Context
//   - vmName string
//   - locationData map[string]string
func (_e *MockProviderer_Expecter) GetVMExternalIP(ctx interface{}, vmName interface{}, locationData interface{}) *MockProviderer_GetVMExternalIP_Call {
	return &MockProviderer_GetVMExternalIP_Call{Call: _e.mock.On("GetVMExternalIP", ctx, vmName, locationData)}
}

func (_c *MockProviderer_GetVMExternalIP_Call) Run(run func(ctx context.Context, vmName string, locationData map[string]string)) *MockProviderer_GetVMExternalIP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]string))
	})
	return _c
}

func (_c *MockProviderer_GetVMExternalIP_Call) Return(_a0 string, _a1 error) *MockProviderer_GetVMExternalIP_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderer_GetVMExternalIP_Call) RunAndReturn(run func(context.Context, string, map[string]string) (string, error)) *MockProviderer_GetVMExternalIP_Call {
	_c.Call.Return(run)
	return _c
}

// PollResources provides a mock function with given fields: ctx
func (_m *MockProviderer) PollResources(ctx context.Context) ([]interface{}, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for PollResources")
	}

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]interface{}, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []interface{}); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderer_PollResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PollResources'
type MockProviderer_PollResources_Call struct {
	*mock.Call
}

// PollResources is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProviderer_Expecter) PollResources(ctx interface{}) *MockProviderer_PollResources_Call {
	return &MockProviderer_PollResources_Call{Call: _e.mock.On("PollResources", ctx)}
}

func (_c *MockProviderer_PollResources_Call) Run(run func(ctx context.Context)) *MockProviderer_PollResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockProviderer_PollResources_Call) Return(_a0 []interface{}, _a1 error) *MockProviderer_PollResources_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderer_PollResources_Call) RunAndReturn(run func(context.Context) ([]interface{}, error)) *MockProviderer_PollResources_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareDeployment provides a mock function with given fields: ctx
func (_m *MockProviderer) PrepareDeployment(ctx context.Context) (*models.Deployment, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for PrepareDeployment")
	}

	var r0 *models.Deployment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*models.Deployment, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *models.Deployment); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Deployment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderer_PrepareDeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareDeployment'
type MockProviderer_PrepareDeployment_Call struct {
	*mock.Call
}

// PrepareDeployment is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProviderer_Expecter) PrepareDeployment(ctx interface{}) *MockProviderer_PrepareDeployment_Call {
	return &MockProviderer_PrepareDeployment_Call{Call: _e.mock.On("PrepareDeployment", ctx)}
}

func (_c *MockProviderer_PrepareDeployment_Call) Run(run func(ctx context.Context)) *MockProviderer_PrepareDeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockProviderer_PrepareDeployment_Call) Return(_a0 *models.Deployment, _a1 error) *MockProviderer_PrepareDeployment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderer_PrepareDeployment_Call) RunAndReturn(run func(context.Context) (*models.Deployment, error)) *MockProviderer_PrepareDeployment_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessMachinesConfig provides a mock function with given fields: ctx
func (_m *MockProviderer) ProcessMachinesConfig(ctx context.Context) (map[string]models.Machiner, map[string]bool, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ProcessMachinesConfig")
	}

	var r0 map[string]models.Machiner
	var r1 map[string]bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]models.Machiner, map[string]bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]models.Machiner); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]models.Machiner)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) map[string]bool); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]bool)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockProviderer_ProcessMachinesConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessMachinesConfig'
type MockProviderer_ProcessMachinesConfig_Call struct {
	*mock.Call
}

// ProcessMachinesConfig is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProviderer_Expecter) ProcessMachinesConfig(ctx interface{}) *MockProviderer_ProcessMachinesConfig_Call {
	return &MockProviderer_ProcessMachinesConfig_Call{Call: _e.mock.On("ProcessMachinesConfig", ctx)}
}

func (_c *MockProviderer_ProcessMachinesConfig_Call) Run(run func(ctx context.Context)) *MockProviderer_ProcessMachinesConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockProviderer_ProcessMachinesConfig_Call) Return(_a0 map[string]models.Machiner, _a1 map[string]bool, _a2 error) *MockProviderer_ProcessMachinesConfig_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockProviderer_ProcessMachinesConfig_Call) RunAndReturn(run func(context.Context) (map[string]models.Machiner, map[string]bool, error)) *MockProviderer_ProcessMachinesConfig_Call {
	_c.Call.Return(run)
	return _c
}

// SetClusterDeployer provides a mock function with given fields: deployer
func (_m *MockProviderer) SetClusterDeployer(deployer common.ClusterDeployerer) {
	_m.Called(deployer)
}

// MockProviderer_SetClusterDeployer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetClusterDeployer'
type MockProviderer_SetClusterDeployer_Call struct {
	*mock.Call
}

// SetClusterDeployer is a helper method to define mock.On call
//   - deployer common.ClusterDeployerer
func (_e *MockProviderer_Expecter) SetClusterDeployer(deployer interface{}) *MockProviderer_SetClusterDeployer_Call {
	return &MockProviderer_SetClusterDeployer_Call{Call: _e.mock.On("SetClusterDeployer", deployer)}
}

func (_c *MockProviderer_SetClusterDeployer_Call) Run(run func(deployer common.ClusterDeployerer)) *MockProviderer_SetClusterDeployer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.ClusterDeployerer))
	})
	return _c
}

func (_c *MockProviderer_SetClusterDeployer_Call) Return() *MockProviderer_SetClusterDeployer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockProviderer_SetClusterDeployer_Call) RunAndReturn(run func(common.ClusterDeployerer)) *MockProviderer_SetClusterDeployer_Call {
	_c.Call.Return(run)
	return _c
}

// StartResourcePolling provides a mock function with given fields: ctx
func (_m *MockProviderer) StartResourcePolling(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for StartResourcePolling")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProviderer_StartResourcePolling_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartResourcePolling'
type MockProviderer_StartResourcePolling_Call struct {
	*mock.Call
}

// StartResourcePolling is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProviderer_Expecter) StartResourcePolling(ctx interface{}) *MockProviderer_StartResourcePolling_Call {
	return &MockProviderer_StartResourcePolling_Call{Call: _e.mock.On("StartResourcePolling", ctx)}
}

func (_c *MockProviderer_StartResourcePolling_Call) Run(run func(ctx context.Context)) *MockProviderer_StartResourcePolling_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockProviderer_StartResourcePolling_Call) Return(_a0 error) *MockProviderer_StartResourcePolling_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProviderer_StartResourcePolling_Call) RunAndReturn(run func(context.Context) error) *MockProviderer_StartResourcePolling_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateMachineType provides a mock function with given fields: ctx, location, machineType
func (_m *MockProviderer) ValidateMachineType(ctx context.Context, location string, machineType string) (bool, error) {
	ret := _m.Called(ctx, location, machineType)

	if len(ret) == 0 {
		panic("no return value specified for ValidateMachineType")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, location, machineType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, location, machineType)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, location, machineType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderer_ValidateMachineType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateMachineType'
type MockProviderer_ValidateMachineType_Call struct {
	*mock.Call
}

// ValidateMachineType is a helper method to define mock.On call
//   - ctx context.Context
//   - location string
//   - machineType string
func (_e *MockProviderer_Expecter) ValidateMachineType(ctx interface{}, location interface{}, machineType interface{}) *MockProviderer_ValidateMachineType_Call {
	return &MockProviderer_ValidateMachineType_Call{Call: _e.mock.On("ValidateMachineType", ctx, location, machineType)}
}

func (_c *MockProviderer_ValidateMachineType_Call) Run(run func(ctx context.Context, location string, machineType string)) *MockProviderer_ValidateMachineType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockProviderer_ValidateMachineType_Call) Return(_a0 bool, _a1 error) *MockProviderer_ValidateMachineType_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderer_ValidateMachineType_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *MockProviderer_ValidateMachineType_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProviderer creates a new instance of MockProviderer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProviderer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProviderer {
	mock := &MockProviderer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
