// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	context "context"

	cloudformation "github.com/aws/aws-sdk-go-v2/service/cloudformation"

	mock "github.com/stretchr/testify/mock"
)

// MockCloudFormationAPIer is an autogenerated mock type for the CloudFormationAPIer type
type MockCloudFormationAPIer struct {
	mock.Mock
}

type MockCloudFormationAPIer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCloudFormationAPIer) EXPECT() *MockCloudFormationAPIer_Expecter {
	return &MockCloudFormationAPIer_Expecter{mock: &_m.Mock}
}

// CreateStack provides a mock function with given fields: ctx, params, opts
func (_m *MockCloudFormationAPIer) CreateStack(ctx context.Context, params *cloudformation.CreateStackInput, opts ...func(*cloudformation.Options)) (*cloudformation.CreateStackOutput, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateStack")
	}

	var r0 *cloudformation.CreateStackOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudformation.CreateStackInput, ...func(*cloudformation.Options)) (*cloudformation.CreateStackOutput, error)); ok {
		return rf(ctx, params, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudformation.CreateStackInput, ...func(*cloudformation.Options)) *cloudformation.CreateStackOutput); ok {
		r0 = rf(ctx, params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudformation.CreateStackOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudformation.CreateStackInput, ...func(*cloudformation.Options)) error); ok {
		r1 = rf(ctx, params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudFormationAPIer_CreateStack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStack'
type MockCloudFormationAPIer_CreateStack_Call struct {
	*mock.Call
}

// CreateStack is a helper method to define mock.On call
//   - ctx context.Context
//   - params *cloudformation.CreateStackInput
//   - opts ...func(*cloudformation.Options)
func (_e *MockCloudFormationAPIer_Expecter) CreateStack(ctx interface{}, params interface{}, opts ...interface{}) *MockCloudFormationAPIer_CreateStack_Call {
	return &MockCloudFormationAPIer_CreateStack_Call{Call: _e.mock.On("CreateStack",
		append([]interface{}{ctx, params}, opts...)...)}
}

func (_c *MockCloudFormationAPIer_CreateStack_Call) Run(run func(ctx context.Context, params *cloudformation.CreateStackInput, opts ...func(*cloudformation.Options))) *MockCloudFormationAPIer_CreateStack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*cloudformation.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*cloudformation.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*cloudformation.CreateStackInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudFormationAPIer_CreateStack_Call) Return(_a0 *cloudformation.CreateStackOutput, _a1 error) *MockCloudFormationAPIer_CreateStack_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudFormationAPIer_CreateStack_Call) RunAndReturn(run func(context.Context, *cloudformation.CreateStackInput, ...func(*cloudformation.Options)) (*cloudformation.CreateStackOutput, error)) *MockCloudFormationAPIer_CreateStack_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStack provides a mock function with given fields: ctx, params, opts
func (_m *MockCloudFormationAPIer) DeleteStack(ctx context.Context, params *cloudformation.DeleteStackInput, opts ...func(*cloudformation.Options)) (*cloudformation.DeleteStackOutput, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStack")
	}

	var r0 *cloudformation.DeleteStackOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudformation.DeleteStackInput, ...func(*cloudformation.Options)) (*cloudformation.DeleteStackOutput, error)); ok {
		return rf(ctx, params, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudformation.DeleteStackInput, ...func(*cloudformation.Options)) *cloudformation.DeleteStackOutput); ok {
		r0 = rf(ctx, params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudformation.DeleteStackOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudformation.DeleteStackInput, ...func(*cloudformation.Options)) error); ok {
		r1 = rf(ctx, params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudFormationAPIer_DeleteStack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStack'
type MockCloudFormationAPIer_DeleteStack_Call struct {
	*mock.Call
}

// DeleteStack is a helper method to define mock.On call
//   - ctx context.Context
//   - params *cloudformation.DeleteStackInput
//   - opts ...func(*cloudformation.Options)
func (_e *MockCloudFormationAPIer_Expecter) DeleteStack(ctx interface{}, params interface{}, opts ...interface{}) *MockCloudFormationAPIer_DeleteStack_Call {
	return &MockCloudFormationAPIer_DeleteStack_Call{Call: _e.mock.On("DeleteStack",
		append([]interface{}{ctx, params}, opts...)...)}
}

func (_c *MockCloudFormationAPIer_DeleteStack_Call) Run(run func(ctx context.Context, params *cloudformation.DeleteStackInput, opts ...func(*cloudformation.Options))) *MockCloudFormationAPIer_DeleteStack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*cloudformation.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*cloudformation.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*cloudformation.DeleteStackInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudFormationAPIer_DeleteStack_Call) Return(_a0 *cloudformation.DeleteStackOutput, _a1 error) *MockCloudFormationAPIer_DeleteStack_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudFormationAPIer_DeleteStack_Call) RunAndReturn(run func(context.Context, *cloudformation.DeleteStackInput, ...func(*cloudformation.Options)) (*cloudformation.DeleteStackOutput, error)) *MockCloudFormationAPIer_DeleteStack_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeStackEvents provides a mock function with given fields: ctx, params, opts
func (_m *MockCloudFormationAPIer) DescribeStackEvents(ctx context.Context, params *cloudformation.DescribeStackEventsInput, opts ...func(*cloudformation.Options)) (*cloudformation.DescribeStackEventsOutput, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeStackEvents")
	}

	var r0 *cloudformation.DescribeStackEventsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudformation.DescribeStackEventsInput, ...func(*cloudformation.Options)) (*cloudformation.DescribeStackEventsOutput, error)); ok {
		return rf(ctx, params, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudformation.DescribeStackEventsInput, ...func(*cloudformation.Options)) *cloudformation.DescribeStackEventsOutput); ok {
		r0 = rf(ctx, params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudformation.DescribeStackEventsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudformation.DescribeStackEventsInput, ...func(*cloudformation.Options)) error); ok {
		r1 = rf(ctx, params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudFormationAPIer_DescribeStackEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeStackEvents'
type MockCloudFormationAPIer_DescribeStackEvents_Call struct {
	*mock.Call
}

// DescribeStackEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - params *cloudformation.DescribeStackEventsInput
//   - opts ...func(*cloudformation.Options)
func (_e *MockCloudFormationAPIer_Expecter) DescribeStackEvents(ctx interface{}, params interface{}, opts ...interface{}) *MockCloudFormationAPIer_DescribeStackEvents_Call {
	return &MockCloudFormationAPIer_DescribeStackEvents_Call{Call: _e.mock.On("DescribeStackEvents",
		append([]interface{}{ctx, params}, opts...)...)}
}

func (_c *MockCloudFormationAPIer_DescribeStackEvents_Call) Run(run func(ctx context.Context, params *cloudformation.DescribeStackEventsInput, opts ...func(*cloudformation.Options))) *MockCloudFormationAPIer_DescribeStackEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*cloudformation.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*cloudformation.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*cloudformation.DescribeStackEventsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudFormationAPIer_DescribeStackEvents_Call) Return(_a0 *cloudformation.DescribeStackEventsOutput, _a1 error) *MockCloudFormationAPIer_DescribeStackEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudFormationAPIer_DescribeStackEvents_Call) RunAndReturn(run func(context.Context, *cloudformation.DescribeStackEventsInput, ...func(*cloudformation.Options)) (*cloudformation.DescribeStackEventsOutput, error)) *MockCloudFormationAPIer_DescribeStackEvents_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeStacks provides a mock function with given fields: ctx, params, opts
func (_m *MockCloudFormationAPIer) DescribeStacks(ctx context.Context, params *cloudformation.DescribeStacksInput, opts ...func(*cloudformation.Options)) (*cloudformation.DescribeStacksOutput, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeStacks")
	}

	var r0 *cloudformation.DescribeStacksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudformation.DescribeStacksInput, ...func(*cloudformation.Options)) (*cloudformation.DescribeStacksOutput, error)); ok {
		return rf(ctx, params, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudformation.DescribeStacksInput, ...func(*cloudformation.Options)) *cloudformation.DescribeStacksOutput); ok {
		r0 = rf(ctx, params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudformation.DescribeStacksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudformation.DescribeStacksInput, ...func(*cloudformation.Options)) error); ok {
		r1 = rf(ctx, params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudFormationAPIer_DescribeStacks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeStacks'
type MockCloudFormationAPIer_DescribeStacks_Call struct {
	*mock.Call
}

// DescribeStacks is a helper method to define mock.On call
//   - ctx context.Context
//   - params *cloudformation.DescribeStacksInput
//   - opts ...func(*cloudformation.Options)
func (_e *MockCloudFormationAPIer_Expecter) DescribeStacks(ctx interface{}, params interface{}, opts ...interface{}) *MockCloudFormationAPIer_DescribeStacks_Call {
	return &MockCloudFormationAPIer_DescribeStacks_Call{Call: _e.mock.On("DescribeStacks",
		append([]interface{}{ctx, params}, opts...)...)}
}

func (_c *MockCloudFormationAPIer_DescribeStacks_Call) Run(run func(ctx context.Context, params *cloudformation.DescribeStacksInput, opts ...func(*cloudformation.Options))) *MockCloudFormationAPIer_DescribeStacks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*cloudformation.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*cloudformation.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*cloudformation.DescribeStacksInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudFormationAPIer_DescribeStacks_Call) Return(_a0 *cloudformation.DescribeStacksOutput, _a1 error) *MockCloudFormationAPIer_DescribeStacks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudFormationAPIer_DescribeStacks_Call) RunAndReturn(run func(context.Context, *cloudformation.DescribeStacksInput, ...func(*cloudformation.Options)) (*cloudformation.DescribeStacksOutput, error)) *MockCloudFormationAPIer_DescribeStacks_Call {
	_c.Call.Return(run)
	return _c
}

// GetTemplate provides a mock function with given fields: ctx, params, opts
func (_m *MockCloudFormationAPIer) GetTemplate(ctx context.Context, params *cloudformation.GetTemplateInput, opts ...func(*cloudformation.Options)) (*cloudformation.GetTemplateOutput, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTemplate")
	}

	var r0 *cloudformation.GetTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudformation.GetTemplateInput, ...func(*cloudformation.Options)) (*cloudformation.GetTemplateOutput, error)); ok {
		return rf(ctx, params, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudformation.GetTemplateInput, ...func(*cloudformation.Options)) *cloudformation.GetTemplateOutput); ok {
		r0 = rf(ctx, params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudformation.GetTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudformation.GetTemplateInput, ...func(*cloudformation.Options)) error); ok {
		r1 = rf(ctx, params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudFormationAPIer_GetTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTemplate'
type MockCloudFormationAPIer_GetTemplate_Call struct {
	*mock.Call
}

// GetTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - params *cloudformation.GetTemplateInput
//   - opts ...func(*cloudformation.Options)
func (_e *MockCloudFormationAPIer_Expecter) GetTemplate(ctx interface{}, params interface{}, opts ...interface{}) *MockCloudFormationAPIer_GetTemplate_Call {
	return &MockCloudFormationAPIer_GetTemplate_Call{Call: _e.mock.On("GetTemplate",
		append([]interface{}{ctx, params}, opts...)...)}
}

func (_c *MockCloudFormationAPIer_GetTemplate_Call) Run(run func(ctx context.Context, params *cloudformation.GetTemplateInput, opts ...func(*cloudformation.Options))) *MockCloudFormationAPIer_GetTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*cloudformation.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*cloudformation.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*cloudformation.GetTemplateInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudFormationAPIer_GetTemplate_Call) Return(_a0 *cloudformation.GetTemplateOutput, _a1 error) *MockCloudFormationAPIer_GetTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudFormationAPIer_GetTemplate_Call) RunAndReturn(run func(context.Context, *cloudformation.GetTemplateInput, ...func(*cloudformation.Options)) (*cloudformation.GetTemplateOutput, error)) *MockCloudFormationAPIer_GetTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// ListStacks provides a mock function with given fields: ctx, params, opts
func (_m *MockCloudFormationAPIer) ListStacks(ctx context.Context, params *cloudformation.ListStacksInput, opts ...func(*cloudformation.Options)) (*cloudformation.ListStacksOutput, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListStacks")
	}

	var r0 *cloudformation.ListStacksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudformation.ListStacksInput, ...func(*cloudformation.Options)) (*cloudformation.ListStacksOutput, error)); ok {
		return rf(ctx, params, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudformation.ListStacksInput, ...func(*cloudformation.Options)) *cloudformation.ListStacksOutput); ok {
		r0 = rf(ctx, params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudformation.ListStacksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudformation.ListStacksInput, ...func(*cloudformation.Options)) error); ok {
		r1 = rf(ctx, params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudFormationAPIer_ListStacks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStacks'
type MockCloudFormationAPIer_ListStacks_Call struct {
	*mock.Call
}

// ListStacks is a helper method to define mock.On call
//   - ctx context.Context
//   - params *cloudformation.ListStacksInput
//   - opts ...func(*cloudformation.Options)
func (_e *MockCloudFormationAPIer_Expecter) ListStacks(ctx interface{}, params interface{}, opts ...interface{}) *MockCloudFormationAPIer_ListStacks_Call {
	return &MockCloudFormationAPIer_ListStacks_Call{Call: _e.mock.On("ListStacks",
		append([]interface{}{ctx, params}, opts...)...)}
}

func (_c *MockCloudFormationAPIer_ListStacks_Call) Run(run func(ctx context.Context, params *cloudformation.ListStacksInput, opts ...func(*cloudformation.Options))) *MockCloudFormationAPIer_ListStacks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*cloudformation.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*cloudformation.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*cloudformation.ListStacksInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudFormationAPIer_ListStacks_Call) Return(_a0 *cloudformation.ListStacksOutput, _a1 error) *MockCloudFormationAPIer_ListStacks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudFormationAPIer_ListStacks_Call) RunAndReturn(run func(context.Context, *cloudformation.ListStacksInput, ...func(*cloudformation.Options)) (*cloudformation.ListStacksOutput, error)) *MockCloudFormationAPIer_ListStacks_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStack provides a mock function with given fields: ctx, params, opts
func (_m *MockCloudFormationAPIer) UpdateStack(ctx context.Context, params *cloudformation.UpdateStackInput, opts ...func(*cloudformation.Options)) (*cloudformation.UpdateStackOutput, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStack")
	}

	var r0 *cloudformation.UpdateStackOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudformation.UpdateStackInput, ...func(*cloudformation.Options)) (*cloudformation.UpdateStackOutput, error)); ok {
		return rf(ctx, params, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudformation.UpdateStackInput, ...func(*cloudformation.Options)) *cloudformation.UpdateStackOutput); ok {
		r0 = rf(ctx, params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudformation.UpdateStackOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudformation.UpdateStackInput, ...func(*cloudformation.Options)) error); ok {
		r1 = rf(ctx, params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudFormationAPIer_UpdateStack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStack'
type MockCloudFormationAPIer_UpdateStack_Call struct {
	*mock.Call
}

// UpdateStack is a helper method to define mock.On call
//   - ctx context.Context
//   - params *cloudformation.UpdateStackInput
//   - opts ...func(*cloudformation.Options)
func (_e *MockCloudFormationAPIer_Expecter) UpdateStack(ctx interface{}, params interface{}, opts ...interface{}) *MockCloudFormationAPIer_UpdateStack_Call {
	return &MockCloudFormationAPIer_UpdateStack_Call{Call: _e.mock.On("UpdateStack",
		append([]interface{}{ctx, params}, opts...)...)}
}

func (_c *MockCloudFormationAPIer_UpdateStack_Call) Run(run func(ctx context.Context, params *cloudformation.UpdateStackInput, opts ...func(*cloudformation.Options))) *MockCloudFormationAPIer_UpdateStack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*cloudformation.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*cloudformation.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*cloudformation.UpdateStackInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudFormationAPIer_UpdateStack_Call) Return(_a0 *cloudformation.UpdateStackOutput, _a1 error) *MockCloudFormationAPIer_UpdateStack_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudFormationAPIer_UpdateStack_Call) RunAndReturn(run func(context.Context, *cloudformation.UpdateStackInput, ...func(*cloudformation.Options)) (*cloudformation.UpdateStackOutput, error)) *MockCloudFormationAPIer_UpdateStack_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCloudFormationAPIer creates a new instance of MockCloudFormationAPIer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCloudFormationAPIer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCloudFormationAPIer {
	mock := &MockCloudFormationAPIer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
