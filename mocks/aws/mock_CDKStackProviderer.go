// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	awscdk "github.com/aws/aws-cdk-go/awscdk/v2"
	mock "github.com/stretchr/testify/mock"
)

// MockCDKStackProviderer is an autogenerated mock type for the CDKStackProviderer type
type MockCDKStackProviderer struct {
	mock.Mock
}

type MockCDKStackProviderer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCDKStackProviderer) EXPECT() *MockCDKStackProviderer_Expecter {
	return &MockCDKStackProviderer_Expecter{mock: &_m.Mock}
}

// GetTemplate provides a mock function with given fields: stack
func (_m *MockCDKStackProviderer) GetTemplate(stack awscdk.Stack) (string, error) {
	ret := _m.Called(stack)

	if len(ret) == 0 {
		panic("no return value specified for GetTemplate")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(awscdk.Stack) (string, error)); ok {
		return rf(stack)
	}
	if rf, ok := ret.Get(0).(func(awscdk.Stack) string); ok {
		r0 = rf(stack)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(awscdk.Stack) error); ok {
		r1 = rf(stack)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCDKStackProviderer_GetTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTemplate'
type MockCDKStackProviderer_GetTemplate_Call struct {
	*mock.Call
}

// GetTemplate is a helper method to define mock.On call
//   - stack awscdk.Stack
func (_e *MockCDKStackProviderer_Expecter) GetTemplate(stack interface{}) *MockCDKStackProviderer_GetTemplate_Call {
	return &MockCDKStackProviderer_GetTemplate_Call{Call: _e.mock.On("GetTemplate", stack)}
}

func (_c *MockCDKStackProviderer_GetTemplate_Call) Run(run func(stack awscdk.Stack)) *MockCDKStackProviderer_GetTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(awscdk.Stack))
	})
	return _c
}

func (_c *MockCDKStackProviderer_GetTemplate_Call) Return(_a0 string, _a1 error) *MockCDKStackProviderer_GetTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCDKStackProviderer_GetTemplate_Call) RunAndReturn(run func(awscdk.Stack) (string, error)) *MockCDKStackProviderer_GetTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// NewStack provides a mock function with given fields: scope, id, props
func (_m *MockCDKStackProviderer) NewStack(scope awscdk.App, id string, props *awscdk.StackProps) awscdk.Stack {
	ret := _m.Called(scope, id, props)

	if len(ret) == 0 {
		panic("no return value specified for NewStack")
	}

	var r0 awscdk.Stack
	if rf, ok := ret.Get(0).(func(awscdk.App, string, *awscdk.StackProps) awscdk.Stack); ok {
		r0 = rf(scope, id, props)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(awscdk.Stack)
		}
	}

	return r0
}

// MockCDKStackProviderer_NewStack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewStack'
type MockCDKStackProviderer_NewStack_Call struct {
	*mock.Call
}

// NewStack is a helper method to define mock.On call
//   - scope awscdk.App
//   - id string
//   - props *awscdk.StackProps
func (_e *MockCDKStackProviderer_Expecter) NewStack(scope interface{}, id interface{}, props interface{}) *MockCDKStackProviderer_NewStack_Call {
	return &MockCDKStackProviderer_NewStack_Call{Call: _e.mock.On("NewStack", scope, id, props)}
}

func (_c *MockCDKStackProviderer_NewStack_Call) Run(run func(scope awscdk.App, id string, props *awscdk.StackProps)) *MockCDKStackProviderer_NewStack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(awscdk.App), args[1].(string), args[2].(*awscdk.StackProps))
	})
	return _c
}

func (_c *MockCDKStackProviderer_NewStack_Call) Return(_a0 awscdk.Stack) *MockCDKStackProviderer_NewStack_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCDKStackProviderer_NewStack_Call) RunAndReturn(run func(awscdk.App, string, *awscdk.StackProps) awscdk.Stack) *MockCDKStackProviderer_NewStack_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCDKStackProviderer creates a new instance of MockCDKStackProviderer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCDKStackProviderer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCDKStackProviderer {
	mock := &MockCDKStackProviderer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
