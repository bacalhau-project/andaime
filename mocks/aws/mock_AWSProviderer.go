// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	context "context"

	aws "github.com/bacalhau-project/andaime/pkg/models/interfaces/aws"

	mock "github.com/stretchr/testify/mock"

	types "github.com/aws/aws-sdk-go-v2/service/ec2/types"
)

// MockAWSProviderer is an autogenerated mock type for the AWSProviderer type
type MockAWSProviderer struct {
	mock.Mock
}

type MockAWSProviderer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAWSProviderer) EXPECT() *MockAWSProviderer_Expecter {
	return &MockAWSProviderer_Expecter{mock: &_m.Mock}
}

// CreateDeployment provides a mock function with given fields: ctx
func (_m *MockAWSProviderer) CreateDeployment(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeployment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAWSProviderer_CreateDeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDeployment'
type MockAWSProviderer_CreateDeployment_Call struct {
	*mock.Call
}

// CreateDeployment is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAWSProviderer_Expecter) CreateDeployment(ctx interface{}) *MockAWSProviderer_CreateDeployment_Call {
	return &MockAWSProviderer_CreateDeployment_Call{Call: _e.mock.On("CreateDeployment", ctx)}
}

func (_c *MockAWSProviderer_CreateDeployment_Call) Run(run func(ctx context.Context)) *MockAWSProviderer_CreateDeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAWSProviderer_CreateDeployment_Call) Return(_a0 error) *MockAWSProviderer_CreateDeployment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAWSProviderer_CreateDeployment_Call) RunAndReturn(run func(context.Context) error) *MockAWSProviderer_CreateDeployment_Call {
	_c.Call.Return(run)
	return _c
}

// Destroy provides a mock function with given fields: ctx
func (_m *MockAWSProviderer) Destroy(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Destroy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAWSProviderer_Destroy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Destroy'
type MockAWSProviderer_Destroy_Call struct {
	*mock.Call
}

// Destroy is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAWSProviderer_Expecter) Destroy(ctx interface{}) *MockAWSProviderer_Destroy_Call {
	return &MockAWSProviderer_Destroy_Call{Call: _e.mock.On("Destroy", ctx)}
}

func (_c *MockAWSProviderer_Destroy_Call) Run(run func(ctx context.Context)) *MockAWSProviderer_Destroy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAWSProviderer_Destroy_Call) Return(_a0 error) *MockAWSProviderer_Destroy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAWSProviderer_Destroy_Call) RunAndReturn(run func(context.Context) error) *MockAWSProviderer_Destroy_Call {
	_c.Call.Return(run)
	return _c
}

// GetEC2Client provides a mock function with given fields:
func (_m *MockAWSProviderer) GetEC2Client() (aws.EC2Clienter, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEC2Client")
	}

	var r0 aws.EC2Clienter
	var r1 error
	if rf, ok := ret.Get(0).(func() (aws.EC2Clienter, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() aws.EC2Clienter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(aws.EC2Clienter)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAWSProviderer_GetEC2Client_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEC2Client'
type MockAWSProviderer_GetEC2Client_Call struct {
	*mock.Call
}

// GetEC2Client is a helper method to define mock.On call
func (_e *MockAWSProviderer_Expecter) GetEC2Client() *MockAWSProviderer_GetEC2Client_Call {
	return &MockAWSProviderer_GetEC2Client_Call{Call: _e.mock.On("GetEC2Client")}
}

func (_c *MockAWSProviderer_GetEC2Client_Call) Run(run func()) *MockAWSProviderer_GetEC2Client_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAWSProviderer_GetEC2Client_Call) Return(_a0 aws.EC2Clienter, _a1 error) *MockAWSProviderer_GetEC2Client_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAWSProviderer_GetEC2Client_Call) RunAndReturn(run func() (aws.EC2Clienter, error)) *MockAWSProviderer_GetEC2Client_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestUbuntuImage provides a mock function with given fields: ctx, region
func (_m *MockAWSProviderer) GetLatestUbuntuImage(ctx context.Context, region string) (*types.Image, error) {
	ret := _m.Called(ctx, region)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestUbuntuImage")
	}

	var r0 *types.Image
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.Image, error)); ok {
		return rf(ctx, region)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Image); ok {
		r0 = rf(ctx, region)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, region)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAWSProviderer_GetLatestUbuntuImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestUbuntuImage'
type MockAWSProviderer_GetLatestUbuntuImage_Call struct {
	*mock.Call
}

// GetLatestUbuntuImage is a helper method to define mock.On call
//   - ctx context.Context
//   - region string
func (_e *MockAWSProviderer_Expecter) GetLatestUbuntuImage(ctx interface{}, region interface{}) *MockAWSProviderer_GetLatestUbuntuImage_Call {
	return &MockAWSProviderer_GetLatestUbuntuImage_Call{Call: _e.mock.On("GetLatestUbuntuImage", ctx, region)}
}

func (_c *MockAWSProviderer_GetLatestUbuntuImage_Call) Run(run func(ctx context.Context, region string)) *MockAWSProviderer_GetLatestUbuntuImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAWSProviderer_GetLatestUbuntuImage_Call) Return(_a0 *types.Image, _a1 error) *MockAWSProviderer_GetLatestUbuntuImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAWSProviderer_GetLatestUbuntuImage_Call) RunAndReturn(run func(context.Context, string) (*types.Image, error)) *MockAWSProviderer_GetLatestUbuntuImage_Call {
	_c.Call.Return(run)
	return _c
}

// GetVMExternalIP provides a mock function with given fields: ctx, instanceID
func (_m *MockAWSProviderer) GetVMExternalIP(ctx context.Context, instanceID string) (string, error) {
	ret := _m.Called(ctx, instanceID)

	if len(ret) == 0 {
		panic("no return value specified for GetVMExternalIP")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, instanceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, instanceID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, instanceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAWSProviderer_GetVMExternalIP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVMExternalIP'
type MockAWSProviderer_GetVMExternalIP_Call struct {
	*mock.Call
}

// GetVMExternalIP is a helper method to define mock.On call
//   - ctx context.Context
//   - instanceID string
func (_e *MockAWSProviderer_Expecter) GetVMExternalIP(ctx interface{}, instanceID interface{}) *MockAWSProviderer_GetVMExternalIP_Call {
	return &MockAWSProviderer_GetVMExternalIP_Call{Call: _e.mock.On("GetVMExternalIP", ctx, instanceID)}
}

func (_c *MockAWSProviderer_GetVMExternalIP_Call) Run(run func(ctx context.Context, instanceID string)) *MockAWSProviderer_GetVMExternalIP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAWSProviderer_GetVMExternalIP_Call) Return(_a0 string, _a1 error) *MockAWSProviderer_GetVMExternalIP_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAWSProviderer_GetVMExternalIP_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockAWSProviderer_GetVMExternalIP_Call {
	_c.Call.Return(run)
	return _c
}

// ListDeployments provides a mock function with given fields: ctx
func (_m *MockAWSProviderer) ListDeployments(ctx context.Context) ([]*types.Instance, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListDeployments")
	}

	var r0 []*types.Instance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*types.Instance, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*types.Instance); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Instance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAWSProviderer_ListDeployments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDeployments'
type MockAWSProviderer_ListDeployments_Call struct {
	*mock.Call
}

// ListDeployments is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAWSProviderer_Expecter) ListDeployments(ctx interface{}) *MockAWSProviderer_ListDeployments_Call {
	return &MockAWSProviderer_ListDeployments_Call{Call: _e.mock.On("ListDeployments", ctx)}
}

func (_c *MockAWSProviderer_ListDeployments_Call) Run(run func(ctx context.Context)) *MockAWSProviderer_ListDeployments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAWSProviderer_ListDeployments_Call) Return(_a0 []*types.Instance, _a1 error) *MockAWSProviderer_ListDeployments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAWSProviderer_ListDeployments_Call) RunAndReturn(run func(context.Context) ([]*types.Instance, error)) *MockAWSProviderer_ListDeployments_Call {
	_c.Call.Return(run)
	return _c
}

// SetEC2Client provides a mock function with given fields: client
func (_m *MockAWSProviderer) SetEC2Client(client aws.EC2Clienter) {
	_m.Called(client)
}

// MockAWSProviderer_SetEC2Client_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEC2Client'
type MockAWSProviderer_SetEC2Client_Call struct {
	*mock.Call
}

// SetEC2Client is a helper method to define mock.On call
//   - client aws.EC2Clienter
func (_e *MockAWSProviderer_Expecter) SetEC2Client(client interface{}) *MockAWSProviderer_SetEC2Client_Call {
	return &MockAWSProviderer_SetEC2Client_Call{Call: _e.mock.On("SetEC2Client", client)}
}

func (_c *MockAWSProviderer_SetEC2Client_Call) Run(run func(client aws.EC2Clienter)) *MockAWSProviderer_SetEC2Client_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(aws.EC2Clienter))
	})
	return _c
}

func (_c *MockAWSProviderer_SetEC2Client_Call) Return() *MockAWSProviderer_SetEC2Client_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAWSProviderer_SetEC2Client_Call) RunAndReturn(run func(aws.EC2Clienter)) *MockAWSProviderer_SetEC2Client_Call {
	_c.Call.Return(run)
	return _c
}

// TerminateDeployment provides a mock function with given fields: ctx
func (_m *MockAWSProviderer) TerminateDeployment(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TerminateDeployment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAWSProviderer_TerminateDeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TerminateDeployment'
type MockAWSProviderer_TerminateDeployment_Call struct {
	*mock.Call
}

// TerminateDeployment is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAWSProviderer_Expecter) TerminateDeployment(ctx interface{}) *MockAWSProviderer_TerminateDeployment_Call {
	return &MockAWSProviderer_TerminateDeployment_Call{Call: _e.mock.On("TerminateDeployment", ctx)}
}

func (_c *MockAWSProviderer_TerminateDeployment_Call) Run(run func(ctx context.Context)) *MockAWSProviderer_TerminateDeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAWSProviderer_TerminateDeployment_Call) Return(_a0 error) *MockAWSProviderer_TerminateDeployment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAWSProviderer_TerminateDeployment_Call) RunAndReturn(run func(context.Context) error) *MockAWSProviderer_TerminateDeployment_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateMachineType provides a mock function with given fields: ctx, location, instanceType
func (_m *MockAWSProviderer) ValidateMachineType(ctx context.Context, location string, instanceType string) (bool, error) {
	ret := _m.Called(ctx, location, instanceType)

	if len(ret) == 0 {
		panic("no return value specified for ValidateMachineType")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, location, instanceType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, location, instanceType)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, location, instanceType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAWSProviderer_ValidateMachineType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateMachineType'
type MockAWSProviderer_ValidateMachineType_Call struct {
	*mock.Call
}

// ValidateMachineType is a helper method to define mock.On call
//   - ctx context.Context
//   - location string
//   - instanceType string
func (_e *MockAWSProviderer_Expecter) ValidateMachineType(ctx interface{}, location interface{}, instanceType interface{}) *MockAWSProviderer_ValidateMachineType_Call {
	return &MockAWSProviderer_ValidateMachineType_Call{Call: _e.mock.On("ValidateMachineType", ctx, location, instanceType)}
}

func (_c *MockAWSProviderer_ValidateMachineType_Call) Run(run func(ctx context.Context, location string, instanceType string)) *MockAWSProviderer_ValidateMachineType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockAWSProviderer_ValidateMachineType_Call) Return(_a0 bool, _a1 error) *MockAWSProviderer_ValidateMachineType_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAWSProviderer_ValidateMachineType_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *MockAWSProviderer_ValidateMachineType_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAWSProviderer creates a new instance of MockAWSProviderer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAWSProviderer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAWSProviderer {
	mock := &MockAWSProviderer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
